"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[4946],{9060:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"frontend/angular/design-patterns/behavioural-patterns/memento","title":"Memento","description":"Use case: Saving and restoring an object\'s state.","source":"@site/docs/frontend/angular/design-patterns/behavioural-patterns/memento.md","sourceDirName":"frontend/angular/design-patterns/behavioural-patterns","slug":"/frontend/angular/design-patterns/behavioural-patterns/memento","permalink":"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/memento","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/angular/design-patterns/behavioural-patterns/memento.md","tags":[],"version":"current","frontMatter":{},"sidebar":"devopsSidebar","previous":{"title":"Mediator","permalink":"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/mediator"},"next":{"title":"Observer","permalink":"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/observer"}}');var s=t(4848),a=t(8453);const r={},i="Memento",c={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"memento",children:"Memento"})}),"\n",(0,s.jsx)(n.p,{children:"Use case: Saving and restoring an object's state."}),"\n",(0,s.jsx)(n.p,{children:"Example: Implementing undo/redo functionality in forms or applications."}),"\n",(0,s.jsx)(n.p,{children:"How to find: Look for code that saves snapshots of state and can restore them later."}),"\n",(0,s.jsx)(n.p,{children:"Explanation:"}),"\n",(0,s.jsx)(n.p,{children:"The Memento pattern captures an object's internal state without exposing its implementation, allowing the state to be restored later. In Angular, you might implement this pattern to provide undo/redo capabilities."}),"\n",(0,s.jsx)(n.p,{children:"Example Code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// text-editor.component.ts\nimport { Component } from '@angular/core';\n\ninterface Memento {\n  content: string;\n}\n\n@Component({\n  selector: 'app-text-editor',\n  template: `\n    <textarea [(ngModel)]=\"content\"></textarea>\n    <button (click)=\"save()\">Save</button>\n    <button (click)=\"undo()\">Undo</button>\n  `,\n})\nexport class TextEditorComponent {\n  content: string = '';\n  private history: Memento[] = [];\n\n  save() {\n    this.history.push({ content: this.content });\n  }\n\n  undo() {\n    if (this.history.length > 0) {\n      const memento = this.history.pop();\n      this.content = memento.content;\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The component saves the state of content into the history stack."}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"undo()"})," restores the last saved state."]}),"\n",(0,s.jsx)(n.li,{children:"The internal state is saved and restored without exposing implementation details."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var o=t(6540);const s={},a=o.createContext(s);function r(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);