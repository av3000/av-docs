"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[6700],{6085:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"system-design/software/trpc/trpc","title":"tRPC","description":"What is tRPC?","source":"@site/docs/system-design/software/trpc/trpc.md","sourceDirName":"system-design/software/trpc","slug":"/system-design/software/trpc/","permalink":"/av-docs/docs/system-design/software/trpc/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/system-design/software/trpc/trpc.md","tags":[],"version":"current","frontMatter":{},"sidebar":"systemDesignSidebar","previous":{"title":"GraphQL - Query Language & Runtime","permalink":"/av-docs/docs/system-design/software/graphql/"},"next":{"title":"gRPC","permalink":"/av-docs/docs/system-design/software/grpc/"}}');var s=t(4848),i=t(8453);const a={},o="tRPC",c={},l=[{value:"What is tRPC?",id:"what-is-trpc",level:2},{value:"Project Structure",id:"project-structure",level:3},{value:"Development Workflow",id:"development-workflow",level:3},{value:"Key Benefits Summary",id:"key-benefits-summary",level:2},{value:"Why tRPC?",id:"why-trpc",level:2},{value:"Automatic Type Safety",id:"automatic-type-safety",level:3},{value:"No REST Boilerplate",id:"no-rest-boilerplate",level:3},{value:"Snappy Developer Experience",id:"snappy-developer-experience",level:3},{value:"End-to-End Type Safety",id:"end-to-end-type-safety",level:3},{value:"Core Principles",id:"core-principles",level:2},{value:"Type Safety Without Overhead",id:"type-safety-without-overhead",level:3},{value:"RPC Over HTTP",id:"rpc-over-http",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Router",id:"router",level:3},{value:"Procedures",id:"procedures",level:3},{value:"Context",id:"context",level:3},{value:"Middleware",id:"middleware",level:3},{value:"Server Setup",id:"server-setup",level:2},{value:"Purpose",id:"purpose",level:3},{value:"Next.js API Route",id:"nextjs-api-route",level:3},{value:"Express",id:"express",level:3},{value:"Client Setup",id:"client-setup",level:2},{value:"Purpose",id:"purpose-1",level:3},{value:"React Query Integration",id:"react-query-integration",level:3},{value:"Vanilla Client",id:"vanilla-client",level:3},{value:"Client Usage",id:"client-usage",level:2},{value:"Queries",id:"queries",level:3},{value:"Mutations",id:"mutations",level:3},{value:"Subscriptions",id:"subscriptions",level:3},{value:"Input Validation",id:"input-validation",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"Nested Routers",id:"nested-routers",level:3},{value:"Server-Side Rendering",id:"server-side-rendering",level:3},{value:"Optimistic Updates",id:"optimistic-updates",level:3},{value:"Performance Features",id:"performance-features",level:2},{value:"Request Batching",id:"request-batching",level:3},{value:"Links System",id:"links-system",level:3},{value:"Migration &amp; Integration",id:"migration--integration",level:2},{value:"From REST APIs",id:"from-rest-apis",level:3},{value:"With Existing Validation",id:"with-existing-validation",level:3},{value:"Best Practices &amp; References",id:"best-practices--references",level:2},{value:"Example Repositories",id:"example-repositories",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"trpc",children:"tRPC"})}),"\n",(0,s.jsx)(n.h2,{id:"what-is-trpc",children:"What is tRPC?"}),"\n",(0,s.jsx)(n.p,{children:"Type-safe RPC (Remote Procedure Call) framework for TypeScript. Call server functions directly from your client with full type safety."}),"\n",(0,s.jsx)(n.h3,{id:"project-structure",children:"Project Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"src/\n\u251c\u2500\u2500 server/\n\u2502   \u251c\u2500\u2500 routers/          # Domain-specific routers\n\u2502   \u2502   \u251c\u2500\u2500 user.ts\n\u2502   \u2502   \u251c\u2500\u2500 post.ts\n\u2502   \u2502   \u2514\u2500\u2500 index.ts      # Main app router\n\u2502   \u251c\u2500\u2500 middleware/       # Auth, logging, etc.\n\u2502   \u2514\u2500\u2500 context.ts        # Context creation\n\u251c\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 trpc.ts          # Client setup\n\u2514\u2500\u2500 pages/\n    \u2514\u2500\u2500 api/\n        \u2514\u2500\u2500 trpc/\n            \u2514\u2500\u2500 [trpc].ts # Next.js adapter\n"})}),"\n",(0,s.jsx)(n.h3,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Define procedures"})," on server with input validation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Export router type"})," for client inference"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use procedures"})," in components with full type safety"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Iterate quickly"})," - no build steps, immediate feedback"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"key-benefits-summary",children:"Key Benefits Summary"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\ud83d\udd12 Type Safety"}),": Server changes break client builds, not production"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\u26a1 Developer Experience"}),": No codegen, no build steps, instant feedback"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\ud83d\ude80 Performance"}),": Request batching, smart caching, optimistic updates"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\ud83d\udce6 Minimal Bundle"}),": Small runtime, tree-shakeable, no bloat"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\ud83d\udd0c Framework Agnostic"}),": Works with React, Vue, Svelte, vanilla JS"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"\ud83d\udee0\ufe0f Production Ready"}),": Used by major companies, battle-tested"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"why-trpc",children:"Why tRPC?"}),"\n",(0,s.jsx)(n.h3,{id:"automatic-type-safety",children:"Automatic Type Safety"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"What"}),": Made a server-side change? TypeScript will warn you of errors on your client before you even save the file!\n",(0,s.jsx)(n.strong,{children:"Why"}),": No more runtime errors from API changes. Refactor server code and instantly see what breaks on the frontend."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Server: Change user.name to user.fullName\nconst getUser = t.procedure.query(() => ({ id: "1", fullName: "John" }));\n\n// Client: TypeScript immediately shows error\nconst { data } = trpc.getUser.useQuery();\nconsole.log(data.name); // \u274c Property \'name\' does not exist\nconsole.log(data.fullName); // \u2705 Works\n'})}),"\n",(0,s.jsx)(n.h3,{id:"no-rest-boilerplate",children:"No REST Boilerplate"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"What"}),": Call server functions like local functions - no endpoints, no fetch(), no manual typing\n",(0,s.jsx)(n.strong,{children:"Why"}),": Eliminate HTTP status codes, URL paths, request/response mapping. Focus on business logic, not API plumbing."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Instead of this REST approach:\nconst response = await fetch("/api/users/123");\nconst user: User = await response.json(); // Hope it\'s actually a User!\n\n// You write this:\nconst user = await trpc.getUser.query({ id: "123" }); // Guaranteed to be correct type\n'})}),"\n",(0,s.jsx)(n.h3,{id:"snappy-developer-experience",children:"Snappy Developer Experience"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"What"}),": No build or compile steps, meaning no code generation, runtime bloat or build step\n",(0,s.jsx)(n.strong,{children:"Why"}),": Change server code, immediately use it on client. No waiting for codegen, no generated files to commit."]}),"\n",(0,s.jsx)(n.h3,{id:"end-to-end-type-safety",children:"End-to-End Type Safety"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"What"}),": From database to UI components, your data shapes are consistent and validated\n",(0,s.jsx)(n.strong,{children:"Why"}),": Catch bugs at compile time instead of production. Confident refactoring across your entire stack."]}),"\n",(0,s.jsx)(n.h2,{id:"core-principles",children:"Core Principles"}),"\n",(0,s.jsx)(n.h3,{id:"type-safety-without-overhead",children:"Type Safety Without Overhead"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Server procedures"})," define input/output types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Client automatically infers"})," these types from server code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No manual interfaces"})," or duplicate type definitions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Runtime validation"})," with compile-time safety"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"rpc-over-http",children:"RPC Over HTTP"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Direct function calls"})," instead of REST endpoints"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automatic serialization"})," handles complex data types"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Built-in error handling"})," with structured error codes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batching"})," multiple calls into single HTTP request"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsx)(n.h3,{id:"router",children:"Router"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Central definition of your API - like a service layer you can call from anywhere\n",(0,s.jsx)(n.strong,{children:"Benefit"}),": One source of truth for what your API can do"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { initTRPC } from "@trpc/server";\n\nconst t = initTRPC.create();\n\nexport const appRouter = t.router({\n  hello: t.procedure.query(() => "Hello World"),\n  getUser: t.procedure\n    .input(z.object({ id: z.string() }))\n    .query(({ input }) => ({ id: input.id, name: "John" })),\n});\n\nexport type AppRouter = typeof appRouter;\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"This router becomes your entire API contract. Export the type to enable client-side inference."})}),"\n",(0,s.jsx)(n.h3,{id:"procedures",children:"Procedures"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": The actual functions your client can call\n",(0,s.jsx)(n.strong,{children:"Benefit"}),': Think in terms of "what can users do" rather than "what endpoints exist"']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const router = t.router({\n  // Query - for reading data (safe to retry, cache)\n  getPost: t.procedure\n    .input(z.string())\n    .query(({ input }) => getPostById(input)),\n\n  // Mutation - for changing data (has side effects)\n  createPost: t.procedure\n    .input(z.object({ title: z.string(), content: z.string() }))\n    .mutation(({ input }) => createPost(input)),\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Queries vs mutations mirror the GET vs POST distinction but with semantic meaning."})}),"\n",(0,s.jsx)(n.h3,{id:"context",children:"Context"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Dependency injection for your procedures\n",(0,s.jsx)(n.strong,{children:"Benefit"}),": Access request data, database connections, user auth without prop drilling"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const createContext = ({ req, res }: { req: Request; res: Response }) => ({\n  user: req.user,\n  db: prisma,\n});\n\nconst t = initTRPC.context<typeof createContext>().create();\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Created fresh for each request. Perfect place for user sessions, database connections, etc."})}),"\n",(0,s.jsx)(n.h3,{id:"middleware",children:"Middleware"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Cross-cutting concerns like authentication, logging, rate limiting\n",(0,s.jsx)(n.strong,{children:"Benefit"}),": Write once, apply to many procedures. Composable and reusable."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const authMiddleware = t.middleware(({ ctx, next }) => {\n  if (!ctx.user) throw new Error("Unauthorized");\n  return next({ ctx: { ...ctx, user: ctx.user } });\n});\n\nconst protectedProcedure = t.procedure.use(authMiddleware);\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Middleware can transform context, validate permissions, or short-circuit with errors."})}),"\n",(0,s.jsx)(n.h2,{id:"server-setup",children:"Server Setup"}),"\n",(0,s.jsx)(n.h3,{id:"purpose",children:"Purpose"}),"\n",(0,s.jsx)(n.p,{children:"Make your router available over HTTP. Different adapters for different frameworks."}),"\n",(0,s.jsx)(n.h3,{id:"nextjs-api-route",children:"Next.js API Route"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Benefit"}),": Zero-config setup in Next.js projects"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// pages/api/trpc/[trpc].ts\nimport { createNextApiHandler } from "@trpc/server/adapters/next";\nimport { appRouter } from "~/server/router";\n\nexport default createNextApiHandler({\n  router: appRouter,\n  createContext: ({ req, res }) => ({ req, res }),\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Catch-all route handles all tRPC requests. Next.js handles the HTTP details."})}),"\n",(0,s.jsx)(n.h3,{id:"express",children:"Express"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Benefit"}),": Integrate with existing Express applications"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { createExpressMiddleware } from "@trpc/server/adapters/express";\n\napp.use(\n  "/trpc",\n  createExpressMiddleware({\n    router: appRouter,\n    createContext: ({ req, res }) => ({ req, res }),\n  })\n);\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Mount as middleware. Existing routes continue working normally."})}),"\n",(0,s.jsx)(n.h2,{id:"client-setup",children:"Client Setup"}),"\n",(0,s.jsx)(n.h3,{id:"purpose-1",children:"Purpose"}),"\n",(0,s.jsx)(n.p,{children:"Transform your router type into callable functions with full IntelliSense."}),"\n",(0,s.jsx)(n.h3,{id:"react-query-integration",children:"React Query Integration"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Why React Query"}),": Gives you caching, background updates, optimistic updates, and loading states for free\n",(0,s.jsx)(n.strong,{children:"Result"}),": Production-ready data fetching with minimal code"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { createTRPCReact } from "@trpc/react-query";\nimport type { AppRouter } from "~/server/router";\n\nexport const trpc = createTRPCReact<AppRouter>();\n\nfunction App() {\n  const [queryClient] = useState(() => new QueryClient());\n  const [trpcClient] = useState(() =>\n    trpc.createClient({\n      links: [httpBatchLink({ url: "/api/trpc" })],\n    })\n  );\n\n  return (\n    <trpc.Provider client={trpcClient} queryClient={queryClient}>\n      <QueryClientProvider client={queryClient}>\n        <MyComponent />\n      </QueryClientProvider>\n    </trpc.Provider>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Setup once, use everywhere. Every component gets access to type-safe server functions."})}),"\n",(0,s.jsx)(n.h3,{id:"vanilla-client",children:"Vanilla Client"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"When to use"}),": Node.js scripts, non-React apps, or when you want direct control"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { createTRPCProxyClient, httpBatchLink } from "@trpc/client";\n\nconst client = createTRPCProxyClient<AppRouter>({\n  links: [httpBatchLink({ url: "http://localhost:3000/trpc" })],\n});\n\n// Usage - looks exactly like calling server functions\nconst result = await client.hello.query();\nconst user = await client.getUser.query({ id: "1" });\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Direct async/await interface. Great for scripts or server-to-server communication."})}),"\n",(0,s.jsx)(n.h2,{id:"client-usage",children:"Client Usage"}),"\n",(0,s.jsx)(n.h3,{id:"queries",children:"Queries"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Fetch data with smart caching and automatic background updates\n",(0,s.jsx)(n.strong,{children:"Benefit"}),": Your UI stays fresh without manual cache management"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Automatic loading states, error handling, and caching\nconst { data, isLoading, error } = trpc.getUser.useQuery({ id: "1" });\n\n// Fine-tune caching behavior\nconst { data } = trpc.getPosts.useQuery(undefined, {\n  refetchInterval: 5000, // Keep data fresh\n  staleTime: 1000 * 60, // Don\'t refetch if data is < 1 minute old\n});\n\n// Programmatic cache control\nconst utils = trpc.useContext();\nutils.getUser.invalidate({ id: "1" }); // Force refetch this user\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"React Query handles all the complexity. You get loading states, error boundaries, and smart caching."})}),"\n",(0,s.jsx)(n.h3,{id:"mutations",children:"Mutations"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Change server data and keep UI in sync\n",(0,s.jsx)(n.strong,{children:"Pattern"}),": Mutate \u2192 invalidate related queries \u2192 UI updates automatically"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const createUser = trpc.createUser.useMutation({\n  onSuccess: () => {\n    // Automatically refresh user list in all components\n    utils.getUsers.invalidate();\n  },\n});\n\n// Trigger the mutation\ncreateUser.mutate({ name: "John", email: "john@example.com" });\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"One mutation can update multiple parts of your UI by invalidating related queries."})}),"\n",(0,s.jsx)(n.h3,{id:"subscriptions",children:"Subscriptions"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Real-time updates pushed from server to client\n",(0,s.jsx)(n.strong,{children:"Use cases"}),": Live comments, notifications, collaborative editing, live data feeds"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Server - create real-time data stream\nconst router = t.router({\n  onPostAdd: t.procedure.subscription(() => {\n    return observable<Post>((emit) => {\n      const unsubscribe = eventEmitter.on("post-add", emit.next);\n      return unsubscribe;\n    });\n  }),\n});\n\n// Client - receive live updates\ntrpc.onPostAdd.useSubscription(undefined, {\n  onData: (post) => {\n    // New post appears instantly in UI\n    queryClient.setQueryData(["posts"], (old) => [...old, post]);\n  },\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"WebSocket-like functionality with the same type safety as queries and mutations."})}),"\n",(0,s.jsx)(n.h2,{id:"input-validation",children:"Input Validation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Ensure data integrity and provide TypeScript types\n",(0,s.jsx)(n.strong,{children:"Benefit"}),": Runtime safety + compile-time types from a single schema"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { z } from "zod";\n\nconst router = t.router({\n  createUser: t.procedure\n    .input(\n      z.object({\n        name: z.string().min(1, "Name required"),\n        email: z.string().email("Invalid email"),\n        age: z.number().min(18, "Must be adult").optional(),\n      })\n    )\n    .mutation(({ input }) => {\n      // input is validated AND fully typed\n      // TypeScript knows: input.name is string, input.age is number | undefined\n      return createUser(input);\n    }),\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Zod schema validates incoming data and generates TypeScript types. One definition, two benefits."})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Structured, type-safe error handling across your application\n",(0,s.jsx)(n.strong,{children:"Benefit"}),': Handle specific error cases instead of generic "something went wrong"']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { TRPCError } from "@trpc/server";\n\nconst router = t.router({\n  getUser: t.procedure.input(z.string()).query(({ input }) => {\n    const user = findUser(input);\n    if (!user) {\n      throw new TRPCError({\n        code: "NOT_FOUND",\n        message: "User not found",\n        cause: originalError, // Optional: include underlying error\n      });\n    }\n    return user;\n  }),\n});\n\n// Client gets structured error information\nconst { data, error } = trpc.getUser.useQuery("invalid-id");\nif (error?.data?.code === "NOT_FOUND") {\n  // Show "user not found" UI\n} else if (error?.data?.code === "UNAUTHORIZED") {\n  // Redirect to login\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Errors carry semantic meaning. Client can respond appropriately to different error types."})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"nested-routers",children:"Nested Routers"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Organize large APIs into logical groups\n",(0,s.jsx)(n.strong,{children:"Benefit"}),": Better code organization and cleaner client usage"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const userRouter = t.router({\n  get: t.procedure.input(z.string()).query(({ input }) => getUser(input)),\n  create: t.procedure\n    .input(userSchema)\n    .mutation(({ input }) => createUser(input)),\n  delete: t.procedure\n    .input(z.string())\n    .mutation(({ input }) => deleteUser(input)),\n});\n\nconst appRouter = t.router({\n  user: userRouter,\n  post: postRouter,\n  comment: commentRouter,\n});\n\n// Client usage follows the structure\nconst user = trpc.user.get.useQuery("123");\nconst post = trpc.post.create.useMutation();\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:'Organize by domain, not by HTTP verbs. Think "user operations" not "GET /users".'})}),"\n",(0,s.jsx)(n.h3,{id:"server-side-rendering",children:"Server-Side Rendering"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Load data on the server for faster initial page loads\n",(0,s.jsx)(n.strong,{children:"Benefit"}),": SEO-friendly, faster perceived performance"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Next.js getServerSideProps\nexport async function getServerSideProps() {\n  const helpers = createServerSideHelpers({\n    router: appRouter,\n    ctx: {},\n  });\n\n  // Prefetch data on server\n  await helpers.getUser.prefetch("1");\n  await helpers.getPosts.prefetch();\n\n  return {\n    props: {\n      trpcState: helpers.dehydrate(), // Pass data to client\n    },\n  };\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Page loads with data already available. No loading spinners for critical content."})}),"\n",(0,s.jsx)(n.h3,{id:"optimistic-updates",children:"Optimistic Updates"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Update UI immediately for better perceived performance\n",(0,s.jsx)(n.strong,{children:"When"}),": Actions that usually succeed (like saving a draft, liking a post)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'const createPost = trpc.createPost.useMutation({\n  onMutate: async (newPost) => {\n    // Cancel outgoing requests to avoid race conditions\n    await utils.getPosts.cancel();\n\n    // Snapshot current data for rollback\n    const previousPosts = utils.getPosts.getData();\n\n    // Optimistically update the UI\n    utils.getPosts.setData(undefined, (old) => [\n      ...(old ?? []),\n      { ...newPost, id: "optimistic-id", status: "pending" },\n    ]);\n\n    return { previousPosts };\n  },\n  onError: (err, newPost, context) => {\n    // Something went wrong - rollback the optimistic update\n    utils.getPosts.setData(undefined, context?.previousPosts);\n  },\n  onSettled: () => {\n    // Always refetch to ensure consistency\n    utils.getPosts.invalidate();\n  },\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"UI feels instant. If the request fails, automatically rolls back to previous state."})}),"\n",(0,s.jsx)(n.h2,{id:"performance-features",children:"Performance Features"}),"\n",(0,s.jsx)(n.h3,{id:"request-batching",children:"Request Batching"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"What"}),": Multiple tRPC calls get combined into a single HTTP request\n",(0,s.jsx)(n.strong,{children:"Benefit"}),": Reduce network overhead, especially on slow connections"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// These three calls happen simultaneously...\nconst user = trpc.getUser.useQuery({ id: "1" });\nconst posts = trpc.getPosts.useQuery();\nconst comments = trpc.getComments.useQuery({ postId: "123" });\n\n// ...but only generate one HTTP request\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Automatic batching reduces network chattiness without changing your code."})}),"\n",(0,s.jsx)(n.h3,{id:"links-system",children:"Links System"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Customize how requests are sent (logging, auth, retries, etc.)\n",(0,s.jsx)(n.strong,{children:"Benefit"}),": Cross-cutting concerns handled at the transport layer"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { httpBatchLink, loggerLink, splitLink } from "@trpc/client";\n\nconst client = trpc.createClient({\n  links: [\n    // Log requests in development\n    loggerLink({\n      enabled: (opts) => process.env.NODE_ENV === "development",\n    }),\n    // Route different operations to different transports\n    splitLink({\n      condition: (op) => op.type === "subscription",\n      true: wsLink({ url: "ws://localhost:3001" }), // WebSocket for real-time\n      false: httpBatchLink({ url: "/api/trpc" }), // HTTP for regular calls\n    }),\n  ],\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Compose behaviors like middleware. Add authentication, retry logic, or custom routing."})}),"\n",(0,s.jsx)(n.h2,{id:"migration--integration",children:"Migration & Integration"}),"\n",(0,s.jsx)(n.h3,{id:"from-rest-apis",children:"From REST APIs"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Strategy"}),": Gradual migration - run tRPC alongside existing REST endpoints\n",(0,s.jsx)(n.strong,{children:"Benefit"}),": Migrate page by page, not all at once"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Keep existing REST endpoints\napp.get("/api/legacy/users", legacyHandler);\n\n// Add tRPC for new features\napp.use("/api/trpc", createExpressMiddleware({ router: appRouter }));\n\n// Client can use both\nconst legacyData = await fetch("/api/legacy/users");\nconst newData = await trpc.getUsers.query(); // New tRPC call\n'})}),"\n",(0,s.jsx)(n.h3,{id:"with-existing-validation",children:"With Existing Validation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Strategy"}),": Reuse existing Zod schemas or validation logic\n",(0,s.jsx)(n.strong,{children:"Benefit"}),": Don't duplicate validation rules"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Existing validation schemas\nimport { userCreateSchema } from "./validation/user";\n\nconst router = t.router({\n  createUser: t.procedure\n    .input(userCreateSchema) // Reuse existing schema\n    .mutation(({ input }) => userService.create(input)),\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices--references",children:"Best Practices & References"}),"\n",(0,s.jsx)(n.h3,{id:"example-repositories",children:"Example Repositories"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Production Examples:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/t3-oss/create-t3-app",children:(0,s.jsx)(n.strong,{children:"create-t3-app"})})," - Next.js + tRPC + Prisma starter"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/calcom/cal.com",children:(0,s.jsx)(n.strong,{children:"cal.com"})})," - Large-scale production app using tRPC"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/documenso/documenso",children:(0,s.jsx)(n.strong,{children:"documenso"})})," - Document signing platform"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/dubinc/dub",children:(0,s.jsx)(n.strong,{children:"dub.co"})})," - Link shortening service"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Learning Examples:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/trpc/examples-next-prisma-starter",children:(0,s.jsx)(n.strong,{children:"tRPC Examples"})})," - Official starter templates"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/trpc/examples-kitchen-sink",children:(0,s.jsx)(n.strong,{children:"tRPC Kitchen Sink"})})," - Comprehensive feature examples"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/KATT/chatty",children:(0,s.jsx)(n.strong,{children:"Chatty"})})," - Real-time chat with subscriptions"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);