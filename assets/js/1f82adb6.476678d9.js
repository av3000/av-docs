"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[555],{7728:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"frontend/styling/frameworks/css-in-js/tamagui","title":"Tamagui","description":"Tamagui is a universal UI kit and styling system for React Native and Web that features a compiler for significant performance optimizations. Created by Nate Wienert, it offers a unique approach that combines the consistency of cross-platform development with the performance of zero-runtime CSS-in-JS.","source":"@site/docs/frontend/styling/frameworks/css-in-js/tamagui.md","sourceDirName":"frontend/styling/frameworks/css-in-js","slug":"/frontend/styling/frameworks/css-in-js/tamagui","permalink":"/av-docs/docs/frontend/styling/frameworks/css-in-js/tamagui","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/styling/frameworks/css-in-js/tamagui.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"StyleX","permalink":"/av-docs/docs/frontend/styling/frameworks/css-in-js/stylex"},"next":{"title":"Tokenami","permalink":"/av-docs/docs/frontend/styling/frameworks/css-in-js/tokenami"}}');var s=i(4848),r=i(8453);const a={},o="Tamagui",l={},c=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Basic Installation",id:"basic-installation",level:3},{value:"Setting up the Compiler",id:"setting-up-the-compiler",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Core Styling Components",id:"core-styling-components",level:3},{value:"Using Style Props",id:"using-style-props",level:3},{value:"Interactive States",id:"interactive-states",level:3},{value:"Theme Switching",id:"theme-switching",level:3},{value:"Key Features",id:"key-features",level:2},{value:"1. The Compiler",id:"1-the-compiler",level:3},{value:"2. Style Props API",id:"2-style-props-api",level:3},{value:"3. Theme Tokens",id:"3-theme-tokens",level:3},{value:"4. Variant Props",id:"4-variant-props",level:3},{value:"5. Responsive Styling",id:"5-responsive-styling",level:3},{value:"Tamagui and the CSS-in-JS Evolution",id:"tamagui-and-the-css-in-js-evolution",level:2},{value:"How Tamagui Addresses CSS-in-JS Limitations",id:"how-tamagui-addresses-css-in-js-limitations",level:3},{value:"Tamagui vs. Other Approaches",id:"tamagui-vs-other-approaches",level:2},{value:"Compared to Traditional CSS-in-JS (styled-components, Emotion)",id:"compared-to-traditional-css-in-js-styled-components-emotion",level:3},{value:"Compared to StyleX",id:"compared-to-stylex",level:3},{value:"Compared to Utility CSS (Tailwind)",id:"compared-to-utility-css-tailwind",level:3},{value:"When to Use Tamagui",id:"when-to-use-tamagui",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Resources",id:"resources",level:2}];function d(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"tamagui",children:"Tamagui"})}),"\n",(0,s.jsx)(e.p,{children:"Tamagui is a universal UI kit and styling system for React Native and Web that features a compiler for significant performance optimizations. Created by Nate Wienert, it offers a unique approach that combines the consistency of cross-platform development with the performance of zero-runtime CSS-in-JS."}),"\n",(0,s.jsx)(e.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,s.jsx)(e.p,{children:"Tamagui stands out by focusing on these key principles:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Universal by Design"}),": Write once, run on both React Native and Web with the same code"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Compile-time Optimization"}),": Transforms dynamic React and style code into optimized static output"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Design Tokens System"}),": Comprehensive token system for consistent design across platforms"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Theme Switching"}),": Efficient theme switching that doesn't cause re-renders"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Fully-featured UI Kit"}),": Includes a complete UI component library built on the styling system"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"installation-and-setup",children:"Installation and Setup"}),"\n",(0,s.jsx)(e.h3,{id:"basic-installation",children:"Basic Installation"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# For new projects\nnpx create-tamagui@latest\n\n# For existing projects\nnpm install tamagui @tamagui/core @tamagui/config\n"})}),"\n",(0,s.jsx)(e.h3,{id:"setting-up-the-compiler",children:"Setting up the Compiler"}),"\n",(0,s.jsx)(e.p,{children:"For React Native:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install @tamagui/babel-plugin\n"})}),"\n",(0,s.jsx)(e.p,{children:"Update your babel.config.js:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'module.exports = {\n  plugins: [\n    [\n      "@tamagui/babel-plugin",\n      {\n        components: ["tamagui"],\n        config: "./tamagui.config.ts",\n      },\n    ],\n  ],\n};\n'})}),"\n",(0,s.jsx)(e.p,{children:"For Next.js:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"npm install @tamagui/next-plugin\n"})}),"\n",(0,s.jsx)(e.p,{children:"Update your next.config.js:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'const { withTamagui } = require("@tamagui/next-plugin");\n\nmodule.exports = withTamagui({\n  config: "./tamagui.config.ts",\n  // other config options\n});\n'})}),"\n",(0,s.jsx)(e.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(e.p,{children:"Create a tamagui.config.ts file:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import { createTamagui, createTokens } from "@tamagui/core";\nimport { createInterFont } from "@tamagui/font-inter";\n\n// Your tokens\nconst tokens = createTokens({\n  color: {\n    primary: "#0070f3",\n    secondary: "#6b46c1",\n    // ... more colors\n  },\n  space: {\n    $1: 4,\n    $2: 8,\n    $3: 16,\n    // ... more spacing\n  },\n  size: {\n    $1: 4,\n    $2: 8,\n    // ... more sizes\n  },\n  radius: {\n    $1: 4,\n    $2: 8,\n    // ... more radii\n  },\n  zIndex: {\n    $1: 1,\n    $2: 2,\n    // ... more z-indices\n  },\n});\n\nconst interFont = createInterFont();\n\nconst config = createTamagui({\n  fonts: {\n    heading: interFont,\n    body: interFont,\n  },\n  tokens,\n  themes: {\n    light: {\n      background: "#fff",\n      color: "#000",\n    },\n    dark: {\n      background: "#111",\n      color: "#fff",\n    },\n  },\n});\n\nexport type AppConfig = typeof config;\n\nexport default config;\n'})}),"\n",(0,s.jsx)(e.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,s.jsx)(e.h3,{id:"core-styling-components",children:"Core Styling Components"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import { Stack, Text, XStack, YStack } from "tamagui";\n\nfunction MyComponent() {\n  return (\n    <YStack spacing="$3" padding="$4" backgroundColor="$background">\n      <Text fontSize="$5" fontWeight="bold" color="$color">\n        Hello Tamagui\n      </Text>\n      <XStack spacing="$2" alignItems="center">\n        <Stack width={50} height={50} backgroundColor="$primary" />\n        <Text>Welcome to the future of styling</Text>\n      </XStack>\n    </YStack>\n  );\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"using-style-props",children:"Using Style Props"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import { Stack } from "tamagui";\n\nfunction Card() {\n  return (\n    <Stack\n      padding="$4"\n      margin="$2"\n      backgroundColor="$background"\n      borderRadius="$2"\n      shadowColor="$shadowColor"\n      shadowRadius={5}\n      elevation={2}\n    >\n      {/* Card content */}\n    </Stack>\n  );\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"interactive-states",children:"Interactive States"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import { Button } from "tamagui";\n\nfunction InteractiveButton() {\n  return (\n    <Button\n      backgroundColor="$primary"\n      color="white"\n      fontWeight="bold"\n      // Different states\n      hoverStyle={{ backgroundColor: "$primary2" }}\n      pressStyle={{ scale: 0.98 }}\n      focusStyle={{ borderColor: "$primary" }}\n    >\n      Click Me\n    </Button>\n  );\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"theme-switching",children:"Theme Switching"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import { useTheme, Button, XStack, Text } from "tamagui";\n\nfunction ThemeSwitcher() {\n  const theme = useTheme();\n\n  return (\n    <XStack space="$2">\n      <Text>Current theme: {theme.name}</Text>\n      <Button\n        theme={theme.name === "light" ? "dark" : "light"}\n        onPress={() => {\n          // Use your theme switching logic here\n        }}\n      >\n        Switch to {theme.name === "light" ? "Dark" : "Light"}\n      </Button>\n    </XStack>\n  );\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsx)(e.h3,{id:"1-the-compiler",children:"1. The Compiler"}),"\n",(0,s.jsx)(e.p,{children:"Tamagui's compiler is its standout feature, offering:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Static extraction"}),": Converts dynamic React code to optimal CSS and HTML"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Prop flattening"}),": Simplifies the React render tree for faster performance"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Constant folding"}),": Evaluates expressions at build time where possible"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Partial evaluation"}),": Optimizes what it can while leaving dynamic parts intact"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Before compilation:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'<Stack padding={isCompact ? "$2" : "$4"} backgroundColor="$background">\n  <Text color="$primary">Hello</Text>\n</Stack>\n'})}),"\n",(0,s.jsx)(e.p,{children:"After compilation:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'<div className="tamagui-stack-0">\n  <span className="tamagui-text-1">Hello</span>\n</div>\n'})}),"\n",(0,s.jsx)(e.p,{children:"With generated CSS:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-css",children:".tamagui-stack-0 {\n  padding: var(--space-4);\n  background-color: var(--background);\n}\n.dark .tamagui-stack-0 {\n  background-color: var(--background-dark);\n}\n/* Dynamic part handled in JS */\n.tamagui-text-1 {\n  color: var(--primary);\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"2-style-props-api",children:"2. Style Props API"}),"\n",(0,s.jsx)(e.p,{children:"Tamagui offers an extensive set of style props:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'<YStack\n  // Layout\n  flex={1}\n  width="100%"\n  height={200}\n  // Spacing\n  padding="$4"\n  margin="$2"\n  gap="$3"\n  // Colors & Appearance\n  backgroundColor="$background"\n  opacity={0.9}\n  // Border\n  borderWidth={1}\n  borderColor="$borderColor"\n  borderRadius="$2"\n  // Positioning\n  position="relative"\n  top={0}\n  // Responsive props\n  $gtSm={{\n    flexDirection: "row",\n    padding: "$5",\n  }}\n  $dark={{\n    backgroundColor: "$background2",\n  }}\n/>\n'})}),"\n",(0,s.jsx)(e.h3,{id:"3-theme-tokens",children:"3. Theme Tokens"}),"\n",(0,s.jsx)(e.p,{children:"Tamagui uses a comprehensive token system:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'// In your configuration\nconst tokens = createTokens({\n  color: {\n    primary: "#0070f3",\n    secondary: "#6b46c1",\n    gray100: "#f7fafc",\n    gray900: "#1a202c",\n  },\n  space: {\n    $1: 4,\n    $2: 8,\n    $3: 16,\n    $4: 32,\n    $5: 64,\n  },\n  size: {\n    $1: 4,\n    $2: 8,\n    $3: 16,\n    $4: 32,\n    $5: 64,\n  },\n  radius: {\n    $1: 2,\n    $2: 4,\n    $3: 8,\n    $4: 16,\n    $5: 9999,\n  },\n  // More token categories...\n});\n'})}),"\n",(0,s.jsx)(e.h3,{id:"4-variant-props",children:"4. Variant Props"}),"\n",(0,s.jsx)(e.p,{children:"Create component variants:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import { styled } from "tamagui";\n\nconst Button = styled(Stack, {\n  name: "Button",\n  padding: "$2",\n  borderRadius: "$2",\n  backgroundColor: "$primary",\n\n  variants: {\n    size: {\n      small: {\n        padding: "$1",\n        fontSize: "$1",\n      },\n      large: {\n        padding: "$3",\n        fontSize: "$3",\n      },\n    },\n    outlined: {\n      true: {\n        backgroundColor: "transparent",\n        borderWidth: 1,\n        borderColor: "$primary",\n        color: "$primary",\n      },\n    },\n  },\n});\n\n// Usage\n<Button size="large" outlined>\n  My Button\n</Button>;\n'})}),"\n",(0,s.jsx)(e.h3,{id:"5-responsive-styling",children:"5. Responsive Styling"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:'import { Stack } from "tamagui";\n\nfunction ResponsiveComponent() {\n  return (\n    <Stack\n      flexDirection="column"\n      $gtSm={{ flexDirection: "row" }}\n      $gtMd={{ maxWidth: 1000 }}\n      $gtLg={{ maxWidth: 1200 }}\n    >\n      {/* Content */}\n    </Stack>\n  );\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"tamagui-and-the-css-in-js-evolution",children:"Tamagui and the CSS-in-JS Evolution"}),"\n",(0,s.jsx)(e.p,{children:"Tamagui represents a new generation of CSS-in-JS libraries that address the performance concerns that plague traditional CSS-in-JS approaches."}),"\n",(0,s.jsx)(e.h3,{id:"how-tamagui-addresses-css-in-js-limitations",children:"How Tamagui Addresses CSS-in-JS Limitations"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Eliminates Runtime Overhead"}),": The compiler extracts as much CSS as possible at build time"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Optimizes SSR Compatibility"}),": No complex style extraction process needed"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Supports React Concurrent Mode"}),": No style injection during render"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Reduces Bundle Size"}),": Extracted styles don't require JavaScript processing"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"As Rich Harris, creator of Svelte, noted:"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:'"CSS-in-JS was a necessary step in the evolution of our thinking, but ultimately we want tools that operate at build time rather than runtime."'}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Tamagui embodies this philosophy by pushing as much work as possible to build time."}),"\n",(0,s.jsx)(e.h2,{id:"tamagui-vs-other-approaches",children:"Tamagui vs. Other Approaches"}),"\n",(0,s.jsx)(e.h3,{id:"compared-to-traditional-css-in-js-styled-components-emotion",children:"Compared to Traditional CSS-in-JS (styled-components, Emotion)"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Performance"}),": Much faster due to compile-time extraction"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Bundle Size"}),": Smaller due to extracted CSS"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"SSR Compatibility"}),": Better without runtime extraction"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Feature Set"}),": Similar styling capabilities"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Platforms"}),": Works universally across Web and Native"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"compared-to-stylex",children:"Compared to StyleX"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Focus"}),": Universal styling vs. web-only"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Component Library"}),": Includes complete UI kit vs. styling only"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Optimization"}),": Both use build-time compilation"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Syntax"}),": Style props vs. object styles"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Native Support"}),": Full support vs. web-focused"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"compared-to-utility-css-tailwind",children:"Compared to Utility CSS (Tailwind)"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Approach"}),": JS-based vs. HTML class-based"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Type Safety"}),": Strong typing vs. string literals"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Dynamism"}),": Better support for dynamic styling"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Cross-Platform"}),": Works on Native and Web vs. Web-only"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Learning Curve"}),": Component props vs. utility classes"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"when-to-use-tamagui",children:"When to Use Tamagui"}),"\n",(0,s.jsx)(e.p,{children:"Tamagui is particularly well-suited for:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Cross-platform applications"}),": When targeting both React Native and Web"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Performance-critical applications"}),": When runtime CSS-in-JS is too costly"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Design systems"}),": When building a consistent component library"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Teams familiar with React Native"}),": The API will feel natural"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Projects that value type safety"}),": Full TypeScript integration"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Use the compiler"}),": Ensure it's properly set up for maximum performance"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Stick to Tamagui components"}),": Use Stack, Text, etc. rather than native elements"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Leverage the token system"}),": Use tokens for consistent design"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Extract reusable components"}),": Create styled components for common patterns"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Use responsive helpers"}),": Take advantage of the built-in responsive props"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Theme with tokens"}),": Build themes around your token system"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Keep animations performant"}),": Use Tamagui's optimized animation system"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://tamagui.dev/docs/intro/introduction",children:"Tamagui Documentation"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/tamagui/tamagui",children:"Tamagui GitHub Repository"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://tamagui.dev/docs/intro/compiler",children:"Tamagui Compiler Documentation"})}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.a,{href:"https://tamagui.dev/studio",children:"Tamagui Studio"})," - Design tool for Tamagui"]}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/tamagui/tamagui/tree/master/apps/site/data/docs/guides/examples",children:"Tamagui Examples"})}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:"https://github.com/tamagui/tamagui/tree/master/apps/kitchen-sink",children:"Universal App Demo"})}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>o});var t=i(6540);const s={},r=t.createContext(s);function a(n){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);