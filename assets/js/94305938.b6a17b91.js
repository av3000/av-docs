"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[7446],{8154:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"devops/tools/build-automation/transpilers/index","title":"Transpilers in Modern JavaScript","description":"What are Transpilers?","source":"@site/docs/devops/tools/build-automation/transpilers/index.md","sourceDirName":"devops/tools/build-automation/transpilers","slug":"/devops/tools/build-automation/transpilers/","permalink":"/av-docs/docs/devops/tools/build-automation/transpilers/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/devops/tools/build-automation/transpilers/index.md","tags":[],"version":"current","frontMatter":{}}');var s=r(4848),l=r(8453);const t={},a="Transpilers in Modern JavaScript",o={},d=[{value:"What are Transpilers?",id:"what-are-transpilers",level:2},{value:"Key JavaScript Transpilers",id:"key-javascript-transpilers",level:2},{value:"Babel",id:"babel",level:3},{value:"TypeScript Compiler (tsc)",id:"typescript-compiler-tsc",level:3},{value:"SWC (Speedy Web Compiler)",id:"swc-speedy-web-compiler",level:3},{value:"Transpilers in the Build Pipeline",id:"transpilers-in-the-build-pipeline",level:2},{value:"Historical Evolution",id:"historical-evolution",level:3},{value:"Integration with Bundlers",id:"integration-with-bundlers",level:3},{value:"When to Use Transpilers",id:"when-to-use-transpilers",level:3},{value:"Modern Approaches to Transpilation",id:"modern-approaches-to-transpilation",level:2},{value:"Targeted Transpilation",id:"targeted-transpilation",level:3},{value:"Differential Serving",id:"differential-serving",level:3},{value:"Transpiler-free Development",id:"transpiler-free-development",level:3},{value:"Transpilers and Build Tools - Integrated Workflow",id:"transpilers-and-build-tools---integrated-workflow",level:2},{value:"Vite Approach",id:"vite-approach",level:3},{value:"Next.js with SWC",id:"nextjs-with-swc",level:3},{value:"Create React App",id:"create-react-app",level:3},{value:"The Future of Transpilation",id:"the-future-of-transpilation",level:2},{value:"Choosing a Transpilation Strategy",id:"choosing-a-transpilation-strategy",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"transpilers-in-modern-javascript",children:"Transpilers in Modern JavaScript"})}),"\n",(0,s.jsx)(n.h2,{id:"what-are-transpilers",children:"What are Transpilers?"}),"\n",(0,s.jsx)(n.p,{children:"Transpilers (source-to-source compilers) convert code written in one language or version of a language into another language or version. In the JavaScript ecosystem, transpilers enable developers to use modern language features while maintaining compatibility with older environments."}),"\n",(0,s.jsx)(n.h2,{id:"key-javascript-transpilers",children:"Key JavaScript Transpilers"}),"\n",(0,s.jsx)(n.h3,{id:"babel",children:"Babel"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/av-docs/docs/devops/tools/build-automation/transpilers/babel",children:"Babel"})," - The most widely used JavaScript transpiler that converts modern JavaScript (ES2015+) into backwards-compatible versions.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Core Function"}),": Transforms modern JavaScript syntax into code that runs in older browsers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Plugin System"}),": Extensible architecture allowing for custom transformations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Preset Ecosystem"}),": Collections of plugins for specific environments (e.g., ",(0,s.jsx)(n.code,{children:"@babel/preset-env"}),", ",(0,s.jsx)(n.code,{children:"@babel/preset-react"}),", ",(0,s.jsx)(n.code,{children:"@babel/preset-typescript"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Integration"}),": Works with most bundlers (Webpack, Rollup, Vite) through plugins/loaders"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Current Role"}),": Still essential for projects requiring wide browser compatibility"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"typescript-compiler-tsc",children:"TypeScript Compiler (tsc)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/av-docs/docs/devops/tools/build-automation/transpilers/typescript-compiler",children:"TypeScript Compiler"})," - Transpiles TypeScript code to JavaScript while performing type checking.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dual Purpose"}),": Serves as both a type checker and a transpiler"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configuration"}),": Configured through ",(0,s.jsx)(n.code,{children:"tsconfig.json"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Emit Options"}),": Can output modern or legacy JavaScript based on the ",(0,s.jsx)(n.code,{children:"target"})," setting"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Interoperability"}),": Often used alongside Babel in complex setups"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"swc-speedy-web-compiler",children:"SWC (Speedy Web Compiler)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/av-docs/docs/devops/tools/build-automation/transpilers/swc",children:"SWC"})," - A super-fast JavaScript/TypeScript transpiler written in Rust.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Performance"}),": 10-20x faster than Babel"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compatibility"}),": Designed as a drop-in replacement for Babel"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Integration"}),": Used by Next.js, Parcel, and can be integrated with other bundlers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Growing Adoption"}),": Increasingly used in performance-critical build pipelines"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"transpilers-in-the-build-pipeline",children:"Transpilers in the Build Pipeline"}),"\n",(0,s.jsx)(n.h3,{id:"historical-evolution",children:"Historical Evolution"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pre-2015"}),": Limited transpilation needed; most code written for browser compatibility"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"2015-2018"}),": Babel became essential as ES2015+ adoption grew while browser support lagged"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"2019-2022"}),": Bundler-integrated transpilation became standard"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"2023-Present"}),": Rise of faster transpilers (SWC) and reduced need for transpilation as legacy browser support diminishes"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"integration-with-bundlers",children:"Integration with Bundlers"}),"\n",(0,s.jsx)(n.p,{children:"Transpilers typically operate as part of the bundling process:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Source Code \u2192 Transpiler \u2192 Bundler \u2192 Optimized Output\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Webpack"}),": Uses babel-loader, ts-loader, or swc-loader"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Vite"}),": Uses esbuild for transpilation during development, can use Babel for production builds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rollup"}),": Uses @rollup/plugin-babel or @rollup/plugin-typescript"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"esbuild"}),": Has built-in transpilation capabilities, but less configurable than Babel"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"when-to-use-transpilers",children:"When to Use Transpilers"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Browser Compatibility"}),": When supporting older browsers (particularly IE11)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Language Features"}),": When using cutting-edge JavaScript features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TypeScript"}),": When developing with TypeScript"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JSX/TSX"}),": When working with React or similar libraries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom Syntax"}),": When using specialized syntax extensions"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"modern-approaches-to-transpilation",children:"Modern Approaches to Transpilation"}),"\n",(0,s.jsx)(n.h3,{id:"targeted-transpilation",children:"Targeted Transpilation"}),"\n",(0,s.jsx)(n.p,{children:"Modern best practice is targeted transpilation using browserslist to specify exactly which environments you need to support:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'// package.json\n{\n  "browserslist": [">0.2%", "not dead", "not op_mini all"]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"This ensures only necessary transformations are applied, resulting in smaller, more efficient code."}),"\n",(0,s.jsx)(n.h3,{id:"differential-serving",children:"Differential Serving"}),"\n",(0,s.jsx)(n.p,{children:"Serving different bundles to different browsers:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modern Bundle"}),": Minimal transpilation for modern browsers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Legacy Bundle"}),": Fully transpiled for older browsers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implementation"}),": Using ",(0,s.jsx)(n.code,{children:'<script type="module">'})," and ",(0,s.jsx)(n.code,{children:"<script nomodule>"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'\x3c!-- Modern browsers --\x3e\n<script type="module" src="modern-bundle.js"><\/script>\n\x3c!-- Legacy browsers --\x3e\n<script nomodule src="legacy-bundle.js"><\/script>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"transpiler-free-development",children:"Transpiler-free Development"}),"\n",(0,s.jsx)(n.p,{children:"Some projects are moving toward transpiler-free development:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Target only modern browsers (no IE11)"}),"\n",(0,s.jsx)(n.li,{children:"Use only language features with native browser support"}),"\n",(0,s.jsx)(n.li,{children:"Rely on evergreen browser update cycles"}),"\n",(0,s.jsx)(n.li,{children:"Provide polyfills only for specific APIs rather than syntax"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"transpilers-and-build-tools---integrated-workflow",children:"Transpilers and Build Tools - Integrated Workflow"}),"\n",(0,s.jsx)(n.p,{children:"Modern build tools integrate transpilation into their workflows:"}),"\n",(0,s.jsx)(n.h3,{id:"vite-approach",children:"Vite Approach"}),"\n",(0,s.jsx)(n.p,{children:"Vite uses esbuild for fast transpilation during development and can use Babel for production:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// vite.config.js\nexport default {\n  esbuild: {\n    // Development transpilation settings\n  },\n  build: {\n    // Production settings\n    babel: {\n      // Optional Babel configuration for production\n    },\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"nextjs-with-swc",children:"Next.js with SWC"}),"\n",(0,s.jsx)(n.p,{children:"Next.js 12+ uses SWC by default:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// next.config.js\nmodule.exports = {\n  swcMinify: true, // Enable SWC minification\n  compiler: {\n    // SWC options\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"create-react-app",children:"Create React App"}),"\n",(0,s.jsx)(n.p,{children:"CRA abstracts the transpilation configuration but uses Babel internally:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Available through react-app-rewired for customization\nconfig.module.rules[1].oneOf[2].options.presets = [\n  ["@babel/preset-env", { targets: { node: "current" } }],\n  "@babel/preset-react",\n  "@babel/preset-typescript",\n];\n'})}),"\n",(0,s.jsx)(n.h2,{id:"the-future-of-transpilation",children:"The Future of Transpilation"}),"\n",(0,s.jsx)(n.p,{children:"As browser support for modern JavaScript improves, the role of transpilers is evolving:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reduced Transpilation Needs"}),": Less syntax transformation required as browsers implement more ES features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Focus on Performance"}),": Faster transpilers like SWC and esbuild replacing Babel in many workflows"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type Checking Separation"}),": Separating type checking (TypeScript, Flow) from transpilation for better performance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Framework-Specific Optimizations"}),": Specialized transforms for frameworks like React (automatic JSX runtime)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Metadata Generation"}),": Using the transpilation step to generate additional metadata for tooling"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"choosing-a-transpilation-strategy",children:"Choosing a Transpilation Strategy"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"For New Projects"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Start with the minimal transpilation needed for your target environment"}),"\n",(0,s.jsx)(n.li,{children:"Use SWC if performance is critical"}),"\n",(0,s.jsx)(n.li,{children:"Consider bundler-native transpilation (esbuild with Vite) for simpler projects"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"For Legacy Projects"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Gradually migrate from Babel to faster alternatives if build time is an issue"}),"\n",(0,s.jsx)(n.li,{children:"Maintain browserslist to ensure you're not over-transpiling"}),"\n",(0,s.jsx)(n.li,{children:"Consider differential serving to optimize for both modern and legacy browsers"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"For Library Authors"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Provide both ESM and CommonJS outputs"}),"\n",(0,s.jsx)(n.li,{children:"Transpile conservatively to avoid compatibility issues"}),"\n",(0,s.jsx)(n.li,{children:'Consider shipping both transpiled and untranspiled code (via package.json "exports")'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Transpilers remain an essential part of the JavaScript build ecosystem, but their usage is becoming more strategic and performance-focused as the language and browser landscape matures."})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var i=r(6540);const s={},l=i.createContext(s);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);