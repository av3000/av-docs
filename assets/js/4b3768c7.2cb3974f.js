"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[3935],{9975:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"frontend/angular/design-patterns/behavioural-patterns/visitor","title":"Visitor","description":"Use case: Adding new operations to existing object structures without modifying the structures.","source":"@site/docs/frontend/angular/design-patterns/behavioural-patterns/visitor.md","sourceDirName":"frontend/angular/design-patterns/behavioural-patterns","slug":"/frontend/angular/design-patterns/behavioural-patterns/visitor","permalink":"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/visitor","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/angular/design-patterns/behavioural-patterns/visitor.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"Template Method","permalink":"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/template-method"},"next":{"title":"Intro","permalink":"/av-docs/docs/frontend/react/"}}');var o=n(4848),i=n(8453);const s={},c="Visitor",a={},l=[];function m(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"visitor",children:"Visitor"})}),"\n",(0,o.jsx)(t.p,{children:"Use case: Adding new operations to existing object structures without modifying the structures."}),"\n",(0,o.jsx)(t.p,{children:"Example: Traversing a complex data structure like an abstract syntax tree and performing operations."}),"\n",(0,o.jsx)(t.p,{children:"How to find: Look for objects that accept a visitor object and have a method to accept visitors."}),"\n",(0,o.jsx)(t.p,{children:"Explanation:"}),"\n",(0,o.jsx)(t.p,{children:"The Visitor pattern allows adding new operations to existing object structures without modifying the structures. The objects accept a visitor, which performs the operation."}),"\n",(0,o.jsx)(t.p,{children:"Example Code:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:'// element.interface.ts\nexport interface Element {\n  accept(visitor: Visitor): void;\n}\n\n// concrete-element-a.ts\nimport { Element } from "./element.interface";\nimport { Visitor } from "./visitor.interface";\n\nexport class ConcreteElementA implements Element {\n  accept(visitor: Visitor): void {\n    visitor.visitElementA(this);\n  }\n\n  operationA(): string {\n    return "ConcreteElementA";\n  }\n}\n\n// concrete-element-b.ts\nimport { Element } from "./element.interface";\nimport { Visitor } from "./visitor.interface";\n\nexport class ConcreteElementB implements Element {\n  accept(visitor: Visitor): void {\n    visitor.visitElementB(this);\n  }\n\n  operationB(): string {\n    return "ConcreteElementB";\n  }\n}\n\n// visitor.interface.ts\nimport { ConcreteElementA } from "./concrete-element-a";\nimport { ConcreteElementB } from "./concrete-element-b";\n\nexport interface Visitor {\n  visitElementA(element: ConcreteElementA): void;\n  visitElementB(element: ConcreteElementB): void;\n}\n\n// concrete-visitor.ts\nimport { Visitor } from "./visitor.interface";\nimport { ConcreteElementA } from "./concrete-element-a";\nimport { ConcreteElementB } from "./concrete-element-b";\n\nexport class ConcreteVisitor implements Visitor {\n  visitElementA(element: ConcreteElementA): void {\n    console.log(`Visitor is processing ${element.operationA()}`);\n  }\n\n  visitElementB(element: ConcreteElementB): void {\n    console.log(`Visitor is processing ${element.operationB()}`);\n  }\n}\n\n// client.component.ts\nimport { Component } from "@angular/core";\nimport { ConcreteElementA } from "./concrete-element-a";\nimport { ConcreteElementB } from "./concrete-element-b";\nimport { ConcreteVisitor } from "./concrete-visitor";\n\n@Component({\n  selector: "app-client",\n  template: `<button (click)="run()">Run Visitor Pattern</button>`,\n})\nexport class ClientComponent {\n  run() {\n    const elements = [new ConcreteElementA(), new ConcreteElementB()];\n    const visitor = new ConcreteVisitor();\n\n    elements.forEach((element) => element.accept(visitor));\n  }\n}\n'})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Elements (ConcreteElementA, ConcreteElementB) implement an accept() method that takes a Visitor."}),"\n",(0,o.jsx)(t.li,{children:"The Visitor interface defines methods for each concrete element."}),"\n",(0,o.jsx)(t.li,{children:"ConcreteVisitor implements the operations to perform on each element."}),"\n",(0,o.jsx)(t.li,{children:"The client uses the visitor to perform operations on elements without modifying their classes."}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var r=n(6540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);