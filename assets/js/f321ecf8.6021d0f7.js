"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[7843],{5810:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"frontend/angular/design-patterns/structural-patterns/composite","title":"Composite","description":"Use case: Building complex UI structures from simpler components.","source":"@site/docs/frontend/angular/design-patterns/structural-patterns/composite.md","sourceDirName":"frontend/angular/design-patterns/structural-patterns","slug":"/frontend/angular/design-patterns/structural-patterns/composite","permalink":"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/composite","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/angular/design-patterns/structural-patterns/composite.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"Bridge","permalink":"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/bridge"},"next":{"title":"Decorator","permalink":"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/decorator"}}');var o=t(4848),r=t(8453);const a={},i="Composite",c={},p=[];function m(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"composite",children:"Composite"})}),"\n",(0,o.jsx)(n.p,{children:"Use case: Building complex UI structures from simpler components."}),"\n",(0,o.jsx)(n.p,{children:"Example: Nested components in Angular templates."}),"\n",(0,o.jsx)(n.p,{children:"How to find: Analyze component templates for nested custom elements."}),"\n",(0,o.jsx)(n.p,{children:"Explanation:"}),"\n",(0,o.jsx)(n.p,{children:"The Composite pattern composes objects into tree structures to represent part-whole hierarchies. In Angular, this is seen in how components are nested within each other to build complex UIs."}),"\n",(0,o.jsx)(n.p,{children:"Example Code:"}),"\n",(0,o.jsx)(n.p,{children:"Leaf Component:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// menu-item.component.ts\n@Component({\n  selector: 'app-menu-item',\n  template: `<li>{{ item.name }}</li>`,\n})\nexport class MenuItemComponent {\n  @Input() item: any;\n}\n\nComposite Component:\n\n// menu.component.ts\n@Component({\n  selector: 'app-menu',\n  template: `\n    <ul>\n      <ng-container *ngFor=\"let item of menuItems\">\n        <app-menu-item *ngIf=\"!item.children\" [item]=\"item\"></app-menu-item>\n        <li *ngIf=\"item.children\">\n          {{ item.name }}\n          <app-menu [menuItems]=\"item.children\"></app-menu>\n        </li>\n      </ng-container>\n    </ul>\n  `,\n})\nexport class MenuComponent {\n  @Input() menuItems: any[];\n}\n\n// Usage in a Parent component:\n// app.component.ts\n@Component({\n  selector: 'app-root',\n  template: `<app-menu [menuItems]=\"menu\"></app-menu>`,\n})\nexport class AppComponent {\n  menu = [\n    {\n      name: 'File',\n      children: [\n        { name: 'New' },\n        { name: 'Open' },\n        {\n          name: 'Recent',\n          children: [{ name: 'Project 1' }, { name: 'Project 2' }],\n        },\n      ],\n    },\n    { name: 'Edit' },\n    { name: 'View' },\n  ];\n}\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"MenuComponent can contain MenuItemComponent or other MenuComponent instances, forming a tree structure."}),"\n",(0,o.jsx)(n.li,{children:"This allows building complex menus with nested items."}),"\n",(0,o.jsx)(n.li,{children:"The pattern allows clients to treat individual objects and compositions uniformly."}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(6540);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);