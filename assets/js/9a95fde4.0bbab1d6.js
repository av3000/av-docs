"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[322],{4606:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"frontend/styling/frameworks/css-in-js/stylex","title":"StyleX","description":"StyleX is an atomic CSS-in-JS library developed by Meta (formerly Facebook) that offers a unique hybrid approach between utility-first CSS frameworks like Tailwind CSS and traditional CSS-in-JS solutions. Released as open source in December 2023, StyleX aims to combine the performance benefits of atomic CSS with the developer experience of CSS-in-JS.","source":"@site/docs/frontend/styling/frameworks/css-in-js/stylex.md","sourceDirName":"frontend/styling/frameworks/css-in-js","slug":"/frontend/styling/frameworks/css-in-js/stylex","permalink":"/av-docs/docs/frontend/styling/frameworks/css-in-js/stylex","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/styling/frameworks/css-in-js/stylex.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"Panda CSS","permalink":"/av-docs/docs/frontend/styling/frameworks/css-in-js/panda-css"},"next":{"title":"Tamagui","permalink":"/av-docs/docs/frontend/styling/frameworks/css-in-js/tamagui"}}');var t=s(4848),r=s(8453);const l={},o="StyleX",c={},a=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"StyleX in the Context of &quot;CSS-in-JS Evolution&quot;",id:"stylex-in-the-context-of-css-in-js-evolution",level:2},{value:"Addressing Runtime CSS-in-JS Limitations",id:"addressing-runtime-css-in-js-limitations",level:3},{value:"StyleX vs. Other Zero-Runtime Solutions",id:"stylex-vs-other-zero-runtime-solutions",level:2},{value:"Compared to vanilla-extract",id:"compared-to-vanilla-extract",level:3},{value:"Compared to Panda CSS",id:"compared-to-panda-css",level:3},{value:"Compared to Tamagui",id:"compared-to-tamagui",level:3},{value:"Compared to Tokenami",id:"compared-to-tokenami",level:3},{value:"StyleX vs. Traditional CSS-in-JS",id:"stylex-vs-traditional-css-in-js",level:2},{value:"Performance Advantages",id:"performance-advantages",level:3},{value:"Developer Experience",id:"developer-experience",level:3},{value:"StyleX vs. Tailwind CSS",id:"stylex-vs-tailwind-css",level:2},{value:"The Industry Shift in CSS-in-JS",id:"the-industry-shift-in-css-in-js",level:2},{value:"The Move to Zero-Runtime Solutions",id:"the-move-to-zero-runtime-solutions",level:3},{value:"Current Usage Data",id:"current-usage-data",level:3},{value:"When to Use StyleX",id:"when-to-use-stylex",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Resources",id:"resources",level:2},{value:"StyleX vs. Traditional CSS-in-JS",id:"stylex-vs-traditional-css-in-js-1",level:2},{value:"Performance Advantages",id:"performance-advantages-1",level:3},{value:"Developer Experience",id:"developer-experience-1",level:3},{value:"StyleX vs. Tailwind CSS",id:"stylex-vs-tailwind-css-1",level:2},{value:"The Current State of CSS-in-JS",id:"the-current-state-of-css-in-js",level:2},{value:"The &quot;CSS-in-JS is Dead&quot; Argument",id:"the-css-in-js-is-dead-argument",level:3},{value:"The Shift to Zero-Runtime Approaches",id:"the-shift-to-zero-runtime-approaches",level:3},{value:"When to Use StyleX",id:"when-to-use-stylex-1",level:2},{value:"Best Practices",id:"best-practices-1",level:2},{value:"Resources",id:"resources-1",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"stylex",children:"StyleX"})}),"\n",(0,t.jsx)(n.p,{children:"StyleX is an atomic CSS-in-JS library developed by Meta (formerly Facebook) that offers a unique hybrid approach between utility-first CSS frameworks like Tailwind CSS and traditional CSS-in-JS solutions. Released as open source in December 2023, StyleX aims to combine the performance benefits of atomic CSS with the developer experience of CSS-in-JS."}),"\n",(0,t.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,t.jsx)(n.p,{children:'StyleX takes a "compile-time" approach to CSS-in-JS, generating atomic CSS at build time rather than runtime, which addresses many of the performance concerns with traditional CSS-in-JS libraries.'}),"\n",(0,t.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Atomic CSS Generation"}),": Similar to Tailwind, StyleX generates atomic (single-purpose) CSS classes, but does so based on your explicit style definitions."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Type Safety"}),": Full TypeScript support with static type checking for styles."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Deterministic Class Names"}),": StyleX generates consistent class names regardless of import order or code splitting."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Compile-time Evaluation"}),": Styles are processed at build time, eliminating runtime overhead."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Style Composition"}),": Allows for composing and overriding styles with a clear specificity model."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Co-location"}),": Keeps styles close to the components that use them."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"installation-and-setup",children:"Installation and Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @stylexjs/stylex\n"})}),"\n",(0,t.jsx)(n.p,{children:"For build tool integration, you'll need framework-specific plugins:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# For webpack\nnpm install @stylexjs/webpack-plugin\n\n# For Babel\nnpm install @stylexjs/babel-plugin\n"})}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'import * as stylex from "@stylexjs/stylex";\n\n// Define styles\nconst styles = stylex.create({\n  base: {\n    fontSize: 16,\n    fontWeight: "normal",\n    color: "black",\n  },\n  primary: {\n    color: "blue",\n    fontWeight: "bold",\n  },\n  large: {\n    fontSize: 20,\n  },\n});\n\nfunction Button({ variant, size, children }) {\n  return (\n    <button\n      {...stylex.props(\n        styles.base,\n        variant === "primary" && styles.primary,\n        size === "large" && styles.large\n      )}\n    >\n      {children}\n    </button>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"stylex-in-the-context-of-css-in-js-evolution",children:'StyleX in the Context of "CSS-in-JS Evolution"'}),"\n",(0,t.jsx)(n.p,{children:'StyleX emerges at a pivotal moment in the evolution of CSS-in-JS. As the industry reevaluates traditional runtime CSS-in-JS approaches, StyleX represents a new generation of solutions that address the performance concerns that led to the so-called "death of CSS-in-JS."'}),"\n",(0,t.jsx)(n.h3,{id:"addressing-runtime-css-in-js-limitations",children:"Addressing Runtime CSS-in-JS Limitations"}),"\n",(0,t.jsx)(n.p,{children:"StyleX directly addresses the major issues that have caused many developers to move away from traditional CSS-in-JS libraries:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Eliminates Runtime Overhead"}),": By moving style processing to build time, StyleX removes the JavaScript execution cost during rendering."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solves SSR Challenges"}),": No more complex style extraction on the server or hydration mismatches."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Works with React Concurrent Features"}),": No runtime style injection that could conflict with React's rendering model."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Reduces Bundle Size"}),": No need to ship a CSS-in-JS runtime to the client."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["As Sam Magura, a styled-components maintainer, noted in ",(0,t.jsx)(n.a,{href:"https://dev.to/srmagura/why-were-breaking-up-wiht-css-in-js-4g9b",children:'"Why We\'re Breaking Up with CSS-in-JS"'}),":"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:'"The primary reason is performance. CSS-in-JS libraries have a runtime cost... and as your application grows, this cost becomes increasingly noticeable."'}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'StyleX was built specifically to address these concerns, representing a shift from "runtime CSS-in-JS is dead" to "CSS-in-JS is evolving to zero-runtime solutions."'}),"\n",(0,t.jsx)(n.h2,{id:"stylex-vs-other-zero-runtime-solutions",children:"StyleX vs. Other Zero-Runtime Solutions"}),"\n",(0,t.jsx)(n.p,{children:"StyleX is part of a growing ecosystem of zero-runtime CSS-in-JS solutions:"}),"\n",(0,t.jsx)(n.h3,{id:"compared-to-vanilla-extract",children:"Compared to vanilla-extract"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://vanilla-extract.style/",children:"vanilla-extract"})," offers:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"TypeScript-first, zero-runtime CSS-in-JS"}),"\n",(0,t.jsx)(n.li,{children:"Theme-aware token system"}),"\n",(0,t.jsx)(n.li,{children:"Similar compile-time approach"}),"\n",(0,t.jsx)(n.li,{children:"More focus on CSS Variables and themes"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// vanilla-extract example\nimport { style } from "@vanilla-extract/css";\n\nconst button = style({\n  backgroundColor: "blue",\n  color: "white",\n  padding: "10px 20px",\n  borderRadius: "4px",\n});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"compared-to-panda-css",children:"Compared to Panda CSS"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://panda-css.com/",children:"Panda CSS"})," offers:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Atomic CSS generation"}),"\n",(0,t.jsx)(n.li,{children:"Style props similar to Chakra UI"}),"\n",(0,t.jsx)(n.li,{children:"Design token system"}),"\n",(0,t.jsx)(n.li,{children:"Strong styling patterns for component libraries"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// Panda CSS example\nimport { css } from "@panda/css";\n\nconst button = css({\n  bg: "blue.500",\n  color: "white",\n  px: "4",\n  py: "2",\n  borderRadius: "md",\n});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"compared-to-tamagui",children:"Compared to Tamagui"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://tamagui.dev/",children:"Tamagui"})," offers:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Native + web universal styling"}),"\n",(0,t.jsx)(n.li,{children:"Optimizing compiler approach"}),"\n",(0,t.jsx)(n.li,{children:"Strong focus on React Native compatibility"}),"\n",(0,t.jsx)(n.li,{children:"Integrated UI component library"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// Tamagui example\nimport { Stack, Text } from "tamagui";\n\nfunction MyComponent() {\n  return (\n    <Stack backgroundColor="blue" padding="$4" borderRadius="$2">\n      <Text color="white">Hello</Text>\n    </Stack>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"compared-to-tokenami",children:"Compared to Tokenami"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://tokenami.com/",children:"Tokenami"})," offers:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Build-time CSS generation"}),"\n",(0,t.jsx)(n.li,{children:"Static extraction"}),"\n",(0,t.jsx)(n.li,{children:"Focus on tokens and responsive theming"}),"\n",(0,t.jsx)(n.li,{children:"Highly optimized output"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// Tokenami example\nimport { tokens, css } from "@tokenami/css";\n\nconst button = css({\n  backgroundColor: tokens.colors.primary,\n  color: tokens.colors.white,\n  padding: `${tokens.space[2]} ${tokens.space[4]}`,\n  borderRadius: tokens.radii.md,\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"stylex-vs-traditional-css-in-js",children:"StyleX vs. Traditional CSS-in-JS"}),"\n",(0,t.jsx)(n.h3,{id:"performance-advantages",children:"Performance Advantages"}),"\n",(0,t.jsx)(n.p,{children:"StyleX addresses the main performance issues of runtime CSS-in-JS libraries:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No Runtime Overhead"}),": Styles are evaluated at build time, not during rendering."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No CSS Injection During Render"}),": StyleX doesn't need to inject style tags during component rendering."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Atomic CSS Approach"}),": Generates optimized atomic CSS similar to Tailwind."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SSR Compatible"}),": Works well with server-side rendering without hydration issues."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"developer-experience",children:"Developer Experience"}),"\n",(0,t.jsx)(n.p,{children:"StyleX offers many of the same benefits that made CSS-in-JS popular:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Co-located Styles"}),": Keep styles with the components that use them."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JavaScript Power"}),": Use JavaScript to compose and manipulate styles."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type Safety"}),": Full TypeScript support for catching errors early."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scoped by Default"}),": No style leaking or selector conflicts."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"stylex-vs-tailwind-css",children:"StyleX vs. Tailwind CSS"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"StyleX"}),(0,t.jsx)(n.th,{children:"Tailwind CSS"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Approach"})}),(0,t.jsx)(n.td,{children:"Atomic CSS-in-JS"}),(0,t.jsx)(n.td,{children:"Utility-first CSS"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Style Definition"})}),(0,t.jsx)(n.td,{children:"JavaScript objects"}),(0,t.jsx)(n.td,{children:"HTML class strings"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Type Safety"})}),(0,t.jsx)(n.td,{children:"Strong, built-in"}),(0,t.jsx)(n.td,{children:"Requires additional tooling"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Compilation"})}),(0,t.jsx)(n.td,{children:"Build time"}),(0,t.jsx)(n.td,{children:"Build time"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Bundle Size"})}),(0,t.jsx)(n.td,{children:"Only includes used styles"}),(0,t.jsx)(n.td,{children:"Only includes used styles with PurgeCSS"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Learning Curve"})}),(0,t.jsx)(n.td,{children:"CSS-in-JS + atomic concepts"}),(0,t.jsx)(n.td,{children:"Learning utility classes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Dynamic Styling"})}),(0,t.jsx)(n.td,{children:"First-class JavaScript support"}),(0,t.jsx)(n.td,{children:"More verbose with conditional classes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Developer Experience"})}),(0,t.jsx)(n.td,{children:"JS-centric"}),(0,t.jsx)(n.td,{children:"HTML-centric"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"the-industry-shift-in-css-in-js",children:"The Industry Shift in CSS-in-JS"}),"\n",(0,t.jsx)(n.p,{children:'The broader CSS-in-JS landscape has undergone significant changes. Rather than simply declaring "CSS-in-JS is dead," the industry is witnessing an evolution from runtime to build-time approaches.'}),"\n",(0,t.jsx)(n.h3,{id:"the-move-to-zero-runtime-solutions",children:"The Move to Zero-Runtime Solutions"}),"\n",(0,t.jsx)(n.p,{children:"The trend is clear:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Runtime CSS-in-JS"})," (styled-components, Emotion) \u2192 Performance issues at scale"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Zero-Runtime CSS-in-JS"})," (StyleX, vanilla-extract, Panda CSS) \u2192 Eliminates runtime overhead"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Utility CSS"})," (Tailwind) \u2192 Continues to gain popularity for its performance and constraints"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"As Mark Dalgleish, creator of CSS Modules and vanilla-extract, notes:"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:'"Our industry has been on a decade long journey from CSS to CSS-in-JS, then back to CSS but with a much deeper understanding of the problems we need CSS to solve."'}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"current-usage-data",children:"Current Usage Data"}),"\n",(0,t.jsxs)(n.p,{children:["According to the ",(0,t.jsx)(n.a,{href:"https://2023.stateofcss.com/en-US/",children:"2023 State of CSS survey"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Traditional CSS-in-JS shows decreasing growth rate"}),"\n",(0,t.jsx)(n.li,{children:"Zero-runtime CSS-in-JS shows increasing adoption"}),"\n",(0,t.jsx)(n.li,{children:"Tailwind CSS shows the highest satisfaction and usage growth"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"when-to-use-stylex",children:"When to Use StyleX"}),"\n",(0,t.jsx)(n.p,{children:"StyleX might be a good choice when:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"You value type safety"})," and want to catch style errors early"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"You prefer JavaScript"})," for defining styles"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance is critical"}),", especially for large applications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"You work with React"})," (though it's not limited to React)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"You want atomic CSS benefits"})," without writing utility classes directly"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"You need SSR compatibility"})," without hydration concerns"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"You're moving away from runtime CSS-in-JS"})," libraries due to performance concerns"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Compose small, focused style objects"})," rather than large monolithic ones"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use semantic names"})," for your style objects that reflect their purpose"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Leverage TypeScript"})," for type safety in your style definitions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create design system tokens"})," for consistent values"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use conditional application"})," of styles for variant handling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consider creating a component library"})," with StyleX for consistent usage"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/facebook/stylex",children:"StyleX GitHub Repository"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://stylexjs.com/",children:"StyleX Documentation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://engineering.fb.com/2023/12/12/open-source/meta-stylex-css-in-js-library/",children:"Introducing StyleX - Meta Blog"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.youtube.com/watch?v=ur-sGzUWId4",children:"StyleX: CSS-in-JS At Meta Scale - YouTube"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://dev.to/srmagura/why-were-breaking-up-wiht-css-in-js-4g9b",children:"Why We're Breaking Up with CSS-in-JS"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://dev.to/srmagura/the-cost-of-css-in-js-5eck",children:"The Cost of CSS-in-JS"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://chriscoyier.net/2023/05/10/css-in-js-the-argument-refined/",children:"CSS in JS: The Argument Refined"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"stylex-vs-traditional-css-in-js-1",children:"StyleX vs. Traditional CSS-in-JS"}),"\n",(0,t.jsx)(n.h3,{id:"performance-advantages-1",children:"Performance Advantages"}),"\n",(0,t.jsx)(n.p,{children:"StyleX addresses the main performance issues of runtime CSS-in-JS libraries:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No Runtime Overhead"}),": Styles are evaluated at build time, not during rendering."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No CSS Injection During Render"}),": StyleX doesn't need to inject style tags during component rendering."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Atomic CSS Approach"}),": Generates optimized atomic CSS similar to Tailwind."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SSR Compatible"}),": Works well with server-side rendering without hydration issues."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"developer-experience-1",children:"Developer Experience"}),"\n",(0,t.jsx)(n.p,{children:"StyleX offers many of the same benefits that made CSS-in-JS popular:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Co-located Styles"}),": Keep styles with the components that use them."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JavaScript Power"}),": Use JavaScript to compose and manipulate styles."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type Safety"}),": Full TypeScript support for catching errors early."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scoped by Default"}),": No style leaking or selector conflicts."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"stylex-vs-tailwind-css-1",children:"StyleX vs. Tailwind CSS"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"StyleX"}),(0,t.jsx)(n.th,{children:"Tailwind CSS"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Approach"})}),(0,t.jsx)(n.td,{children:"Atomic CSS-in-JS"}),(0,t.jsx)(n.td,{children:"Utility-first CSS"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Style Definition"})}),(0,t.jsx)(n.td,{children:"JavaScript objects"}),(0,t.jsx)(n.td,{children:"HTML class strings"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Type Safety"})}),(0,t.jsx)(n.td,{children:"Strong, built-in"}),(0,t.jsx)(n.td,{children:"Requires additional tooling"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Compilation"})}),(0,t.jsx)(n.td,{children:"Build time"}),(0,t.jsx)(n.td,{children:"Build time"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Bundle Size"})}),(0,t.jsx)(n.td,{children:"Only includes used styles"}),(0,t.jsx)(n.td,{children:"Only includes used styles with PurgeCSS"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Learning Curve"})}),(0,t.jsx)(n.td,{children:"CSS-in-JS + atomic concepts"}),(0,t.jsx)(n.td,{children:"Learning utility classes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Dynamic Styling"})}),(0,t.jsx)(n.td,{children:"First-class JavaScript support"}),(0,t.jsx)(n.td,{children:"More verbose with conditional classes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Developer Experience"})}),(0,t.jsx)(n.td,{children:"JS-centric"}),(0,t.jsx)(n.td,{children:"HTML-centric"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"the-current-state-of-css-in-js",children:"The Current State of CSS-in-JS"}),"\n",(0,t.jsx)(n.h3,{id:"the-css-in-js-is-dead-argument",children:'The "CSS-in-JS is Dead" Argument'}),"\n",(0,t.jsx)(n.p,{children:"Several factors have contributed to the perception that traditional CSS-in-JS approaches face significant challenges:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Runtime Performance Costs"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Style recalculation on prop changes"}),"\n",(0,t.jsx)(n.li,{children:"JavaScript execution overhead"}),"\n",(0,t.jsx)(n.li,{children:"Style injection during rendering"}),"\n",(0,t.jsx)(n.li,{children:"Larger bundle sizes"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Server-Side Rendering Challenges"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Style extraction complexities"}),"\n",(0,t.jsx)(n.li,{children:"Hydration mismatches"}),"\n",(0,t.jsx)(n.li,{children:"Extra JavaScript payload for rehydration"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"React Concurrent Rendering"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Runtime CSS-in-JS can cause issues with React's concurrent features"}),"\n",(0,t.jsx)(n.li,{children:"Style injection during render can lead to inconsistent UI states"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Build-time Alternative Maturity"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"CSS Modules gaining popularity"}),"\n",(0,t.jsx)(n.li,{children:"Atomic CSS frameworks like Tailwind CSS providing better performance"}),"\n",(0,t.jsx)(n.li,{children:"Zero-runtime CSS-in-JS solutions emerging"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"the-shift-to-zero-runtime-approaches",children:"The Shift to Zero-Runtime Approaches"}),"\n",(0,t.jsx)(n.p,{children:'The industry is moving toward "zero-runtime" or "compile-time" CSS-in-JS solutions:'}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"StyleX"}),": Meta's atomic CSS-in-JS with build-time evaluation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"vanilla-extract"}),": Type-safe, zero-runtime CSS-in-JS"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Linaria"}),": Zero-runtime CSS-in-JS"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Compiled"}),": CSS-in-JS with build-time compilation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Panda CSS"}),": Type-safe, build-time atomic CSS"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"These solutions aim to provide the developer experience of CSS-in-JS without the runtime performance costs."}),"\n",(0,t.jsx)(n.h2,{id:"when-to-use-stylex-1",children:"When to Use StyleX"}),"\n",(0,t.jsx)(n.p,{children:"StyleX might be a good choice when:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"You value type safety"})," and want to catch style errors early"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"You prefer JavaScript"})," for defining styles"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance is critical"}),", especially for large applications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"You work with React"})," (though it's not limited to React)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"You want atomic CSS benefits"})," without writing utility classes directly"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"You need SSR compatibility"})," without hydration concerns"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices-1",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Compose small, focused style objects"})," rather than large monolithic ones"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use semantic names"})," for your style objects that reflect their purpose"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Leverage TypeScript"})," for type safety in your style definitions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create design system tokens"})," for consistent values"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use conditional application"})," of styles for variant handling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consider creating a component library"})," with StyleX for consistent usage"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"resources-1",children:"Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/facebook/stylex",children:"StyleX GitHub Repository"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://stylexjs.com/",children:"StyleX Documentation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://engineering.fb.com/2023/12/12/open-source/meta-stylex-css-in-js-library/",children:"Introducing StyleX - Meta Blog"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.youtube.com/watch?v=ur-sGzUWId4",children:"StyleX: CSS-in-JS At Meta Scale - YouTube"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);