"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[6318],{2832:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"frontend/angular/design-patterns/creational-patterns/abstract-factory","title":"Abstract Factory","description":"Use case: Creating families of related or dependent objects without specifying their concrete classes.","source":"@site/docs/frontend/angular/design-patterns/creational-patterns/abstract-factory.md","sourceDirName":"frontend/angular/design-patterns/creational-patterns","slug":"/frontend/angular/design-patterns/creational-patterns/abstract-factory","permalink":"/av-docs/docs/frontend/angular/design-patterns/creational-patterns/abstract-factory","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/angular/design-patterns/creational-patterns/abstract-factory.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"Intro","permalink":"/av-docs/docs/frontend/angular/design-patterns/creational-patterns/"},"next":{"title":"Builder","permalink":"/av-docs/docs/frontend/angular/design-patterns/creational-patterns/builder"}}');var a=n(4848),s=n(8453);const o={},c="Abstract Factory",i={},d=[];function l(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"abstract-factory",children:"Abstract Factory"})}),"\n",(0,a.jsx)(t.p,{children:"Use case: Creating families of related or dependent objects without specifying their concrete classes."}),"\n",(0,a.jsx)(t.p,{children:"Example: Using Angular's Renderer2 service to create platform-independent UI elements."}),"\n",(0,a.jsx)(t.p,{children:"How to find: Look for usage of the RendererFactory2 to obtain a Renderer2 instance and methods like createElement, createText, and appendChild that abstract away direct DOM manipulation."}),"\n",(0,a.jsx)(t.p,{children:"In Angular, the Renderer2 service acts as an abstract factory by providing a way to create and manipulate DOM elements without depending on the concrete implementation of the rendering layer. This is particularly useful for rendering components in different environments (e.g., server-side rendering with Angular Universal, Web Workers, or native mobile apps with NativeScript)."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"import { Component, Renderer2, RendererFactory2 } from '@angular/core';\n\n@Component({\n  selector: 'app-abstract-factory-example',\n  template: '<div></div>',\n})\nexport class AbstractFactoryExampleComponent {\n  private renderer: Renderer2;\n\n  constructor(private rendererFactory: RendererFactory2) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  createButton() {\n    const button = this.renderer.createElement('button');\n    const text = this.renderer.createText('Click me');\n    this.renderer.appendChild(button, text);\n    this.renderer.appendChild(document.body, button);\n  }\n}\n\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var r=n(6540);const a={},s=r.createContext(a);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);