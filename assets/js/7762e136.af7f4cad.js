"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[3572],{2492:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"system-design/architecture/clean-architecture/index","title":"The Clean Architecture","description":"Defines how should the application be structured, with business rules at the systems core which are Domain and Application layers. Presentation and Infrastructure are considered as a external dependencies.","source":"@site/docs/system-design/architecture/clean-architecture/index.md","sourceDirName":"system-design/architecture/clean-architecture","slug":"/system-design/architecture/clean-architecture/","permalink":"/av-docs/docs/system-design/architecture/clean-architecture/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/system-design/architecture/clean-architecture/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"systemDesignSidebar","previous":{"title":"Architecture","permalink":"/av-docs/docs/system-design/architecture/"},"next":{"title":"Intro","permalink":"/av-docs/docs/system-design/projects/"}}');var r=i(4848),l=i(8453);const t={},c="The Clean Architecture",a={},o=[{value:"Core business logic - Domain layer.",id:"core-business-logic---domain-layer",level:2},{value:"Application layer.",id:"application-layer",level:2},{value:"Presentation layer.",id:"presentation-layer",level:2},{value:"Infrastructure layer.",id:"infrastructure-layer",level:2},{value:"Architectural Principles",id:"architectural-principles",level:2},{value:"Design Principles",id:"design-principles",level:2},{value:"Dependency Inversion",id:"dependency-inversion",level:3}];function d(e){const n={em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"the-clean-architecture",children:"The Clean Architecture"})}),"\n",(0,r.jsxs)(n.p,{children:["Defines how should the application be structured, with business rules at the systems core which are ",(0,r.jsx)(n.strong,{children:"Domain"})," and ",(0,r.jsx)(n.strong,{children:"Application"})," layers. ",(0,r.jsx)(n.strong,{children:"Presentation"})," and ",(0,r.jsx)(n.strong,{children:"Infrastructure"})," are considered as a external dependencies."]}),"\n",(0,r.jsx)(n.p,{children:"Beneficial to use in Monoliths, Modular Monoliths, Micro-services, but should be used for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Domain-Driven design (DDD)."}),"\n",(0,r.jsx)(n.li,{children:"Complex business logic."}),"\n",(0,r.jsx)(n.li,{children:"Highly testable projects."}),"\n",(0,r.jsx)(n.li,{children:"Architecture enforcing design policies. (Already defining high-level components of the system)."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"core-business-logic---domain-layer",children:"Core business logic - Domain layer."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"should not have a reference to other components or layers in the system."}),"\n",(0,r.jsx)(n.li,{children:"should be able to express the business logic on its own."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Consists of:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Entities(containing business rules)."}),"\n",(0,r.jsx)(n.li,{children:"Value objects."}),"\n",(0,r.jsx)(n.li,{children:"Domain events."}),"\n",(0,r.jsx)(n.li,{children:"Domain services."}),"\n",(0,r.jsxs)(n.li,{children:["Interfaces (for any abstractions that are required by domain, like ",(0,r.jsx)(n.strong,{children:"repository"})," interfaces)."]}),"\n",(0,r.jsx)(n.li,{children:"Exceptions."}),"\n",(0,r.jsx)(n.li,{children:"Enums."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"application-layer",children:"Application layer."}),"\n",(0,r.jsx)(n.p,{children:"Responsible for telling the domain entities and other domain components what should they be doing."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Defines the use cases. (By application services, CQRS with MediatR)"}),"\n",(0,r.jsx)(n.li,{children:"Contains application business logic. (responsible for checking any preconditions and telling domain layer what to do)"}),"\n",(0,r.jsx)(n.li,{children:"Orchestrates the domain."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Benefits of CQRS:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Pros.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Single responsibility principle,"}),"\n",(0,r.jsx)(n.li,{children:"Interface segragation principle,"}),"\n",(0,r.jsx)(n.li,{children:"Decorator patterns (Mediators pipeline behaviour)"}),"\n",(0,r.jsx)(n.li,{children:"Loose coupling,"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Cons.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Indirection."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"presentation-layer",children:"Presentation layer."}),"\n",(0,r.jsx)(n.p,{children:"Entry point to the system with the role of taking in an incoming request and then delegate it to the appropriate use case."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Contains the public API.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["rest API,","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"endpoints,"}),"\n",(0,r.jsx)(n.li,{children:"Middleware,"}),"\n",(0,r.jsx)(n.li,{children:"DI setup,"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Blazer application,"}),"\n",(0,r.jsx)(n.li,{children:"GRPC service."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"infrastructure-layer",children:"Infrastructure layer."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Handles interactions with external services need for application to function.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Databases,"}),"\n",(0,r.jsx)(n.li,{children:"Messaging,"}),"\n",(0,r.jsx)(n.li,{children:"Email providers,"}),"\n",(0,r.jsx)(n.li,{children:"Storage services,"}),"\n",(0,r.jsx)(n.li,{children:"Identity providers."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"architectural-principles",children:"Architectural Principles"}),"\n",(0,r.jsx)(n.p,{children:"All of these three qualities are assured if design is implemented correctly:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Maintainability."}),"\n",(0,r.jsx)(n.li,{children:"Testability."}),"\n",(0,r.jsx)(n.li,{children:"Loose coupling."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"design-principles",children:"Design Principles"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Separation of concerns. ()"}),"\n",(0,r.jsx)(n.li,{children:"Encapsulation."}),"\n",(0,r.jsx)(n.li,{children:"Dependency inversion (DI)."}),"\n",(0,r.jsx)(n.li,{children:"Explicit dependencies."}),"\n",(0,r.jsx)(n.li,{children:"Single responsibility."}),"\n",(0,r.jsx)(n.li,{children:"Persistence ignorance."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"dependency-inversion",children:"Dependency Inversion"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dependencies flow inwards."}),"\n",(0,r.jsx)(n.li,{children:"Inner layers define interfaces or abstractions."}),"\n",(0,r.jsx)(n.li,{children:"Outer layers implement them."}),"\n",(0,r.jsx)(n.li,{children:"Domain-centric approach to organizing dependencies."}),"\n",(0,r.jsx)(n.li,{children:"Application core can be free of external concerns."}),"\n",(0,r.jsx)(n.li,{children:"Allows the system to easily replace external dependencies."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Notice: Not all abstractions are created equal and not all external dependencies are so easily replaced."})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var s=i(6540);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);