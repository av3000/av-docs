"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[5282],{1855:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"frontend/angular/design-patterns/behavioural-patterns/template-method","title":"Template Method","description":"Use case: Defining the skeleton of an algorithm in an operation, deferring some steps to subclasses.","source":"@site/docs/frontend/angular/design-patterns/behavioural-patterns/template-method.md","sourceDirName":"frontend/angular/design-patterns/behavioural-patterns","slug":"/frontend/angular/design-patterns/behavioural-patterns/template-method","permalink":"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/template-method","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/angular/design-patterns/behavioural-patterns/template-method.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"Strategy","permalink":"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/strategy"},"next":{"title":"Visitor","permalink":"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/visitor"}}');var a=t(4848),r=t(8453);const s={},i="Template Method",l={},d=[];function c(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"template-method",children:"Template Method"})}),"\n",(0,a.jsx)(n.p,{children:"Use case: Defining the skeleton of an algorithm in an operation, deferring some steps to subclasses."}),"\n",(0,a.jsx)(n.p,{children:"Example: Base component class that defines common logic with abstract methods to be implemented by subclasses."}),"\n",(0,a.jsx)(n.p,{children:"How to find: Look for abstract base classes with methods that call abstract methods to be overridden."}),"\n",(0,a.jsx)(n.p,{children:"Explanation:"}),"\n",(0,a.jsx)(n.p,{children:"The Template Method pattern defines the skeleton of an algorithm, allowing subclasses to redefine certain steps without changing the algorithm's structure. In Angular, you might have a base class for components that provides a common workflow."}),"\n",(0,a.jsx)(n.p,{children:"Example Code:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// base-dialog.component.ts\nexport abstract class BaseDialogComponent {\n  open() {\n    this.beforeOpen();\n    this.render();\n    this.afterOpen();\n  }\n\n  protected abstract beforeOpen(): void;\n  protected abstract render(): void;\n  protected abstract afterOpen(): void;\n}\n\n// confirm-dialog.component.ts\nimport { Component } from '@angular/core';\nimport { BaseDialogComponent } from './base-dialog.component';\n\n@Component({\n  selector: 'app-confirm-dialog',\n  template: `<div>Confirm Dialog Content</div>`,\n})\nexport class ConfirmDialogComponent extends BaseDialogComponent {\n  protected beforeOpen(): void {\n    console.log('ConfirmDialog: beforeOpen');\n  }\n\n  protected render(): void {\n    console.log('ConfirmDialog: render');\n  }\n\n  protected afterOpen(): void {\n    console.log('ConfirmDialog: afterOpen');\n  }\n}\n\n// alert-dialog.component.ts\nimport { Component } from '@angular/core';\nimport { BaseDialogComponent } from './base-dialog.component';\n\n@Component({\n  selector: 'app-alert-dialog',\n  template: `<div>Alert Dialog Content</div>`,\n})\nexport class AlertDialogComponent extends BaseDialogComponent {\n  protected beforeOpen(): void {\n    console.log('AlertDialog: beforeOpen');\n  }\n\n  protected render(): void {\n    console.log('AlertDialog: render');\n  }\n\n  protected afterOpen(): void {\n    console.log('AlertDialog: afterOpen');\n  }\n}\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["BaseDialogComponent defines the template method ",(0,a.jsx)(n.code,{children:"open()"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Subclasses (",(0,a.jsx)(n.code,{children:"ConfirmDialogComponent"}),", ",(0,a.jsx)(n.code,{children:"AlertDialogComponent"}),") provide specific implementations of the abstract methods."]}),"\n",(0,a.jsxs)(n.li,{children:["The algorithm's structure (",(0,a.jsx)(n.code,{children:"open()"}),") remains unchanged."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var o=t(6540);const a={},r=o.createContext(a);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);