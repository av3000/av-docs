"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[3044],{3705:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"frontend/angular/design-patterns/behavioural-patterns/iterator","title":"Iterator","description":"Use case: Accessing elements of a collection sequentially without exposing its underlying representation.","source":"@site/docs/frontend/angular/design-patterns/behavioural-patterns/iterator.md","sourceDirName":"frontend/angular/design-patterns/behavioural-patterns","slug":"/frontend/angular/design-patterns/behavioural-patterns/iterator","permalink":"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/iterator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/angular/design-patterns/behavioural-patterns/iterator.md","tags":[],"version":"current","frontMatter":{},"sidebar":"devopsSidebar","previous":{"title":"Command","permalink":"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/command"},"next":{"title":"Mediator","permalink":"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/mediator"}}');var a=n(4848),s=n(8453);const o={},i="Iterator",l={},c=[];function d(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"iterator",children:"Iterator"})}),"\n",(0,a.jsx)(t.p,{children:"Use case: Accessing elements of a collection sequentially without exposing its underlying representation."}),"\n",(0,a.jsx)(t.p,{children:"Example: Using Angular's *ngFor directive to iterate over collections."}),"\n",(0,a.jsx)(t.p,{children:"How to find: Look for *ngFor usage in component templates."}),"\n",(0,a.jsx)(t.p,{children:"Explanation:"}),"\n",(0,a.jsx)(t.p,{children:"The Iterator pattern provides a way to access elements of a collection sequentially without exposing its underlying structure. In Angular, the *ngFor directive acts as an iterator over collections in templates."}),"\n",(0,a.jsx)(t.p,{children:"Example code:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"\n// item-list.component.html\n<ul>\n  <li *ngFor=\"let item of items\">{{ item.name }}</li>\n</ul>\n\n// item-list.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-item-list',\n  templateUrl: './item-list.component.html',\n})\nexport class ItemListComponent {\n  items = [\n    { name: 'Item 1' },\n    { name: 'Item 2' },\n    { name: 'Item 3' },\n  ];\n}\n"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"*ngFor iterates over the items array."}),"\n",(0,a.jsx)(t.li,{children:"The component does not expose the underlying data structure; the template handles the iteration."}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(6540);const a={},s=r.createContext(a);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);