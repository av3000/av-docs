"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[2414],{4455:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"frontend/angular/design-patterns/creational-patterns/factory-method","title":"Factory Method Pattern","description":"https://dev.to/coly010/the-factory-pattern-design-patterns-meet-the-frontend-1p2l","source":"@site/docs/frontend/angular/design-patterns/creational-patterns/factory-method.md","sourceDirName":"frontend/angular/design-patterns/creational-patterns","slug":"/frontend/angular/design-patterns/creational-patterns/factory-method","permalink":"/av-docs/docs/frontend/angular/design-patterns/creational-patterns/factory-method","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/angular/design-patterns/creational-patterns/factory-method.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"Builder","permalink":"/av-docs/docs/frontend/angular/design-patterns/creational-patterns/builder"},"next":{"title":"Prototype","permalink":"/av-docs/docs/frontend/angular/design-patterns/creational-patterns/prototype"}}');var r=n(4848),o=n(8453);const s={},c="Factory Method Pattern",i={},d=[];function l(t){const e={a:"a",h1:"h1",header:"header",p:"p",...(0,o.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"factory-method-pattern",children:"Factory Method Pattern"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://dev.to/coly010/the-factory-pattern-design-patterns-meet-the-frontend-1p2l",children:"https://dev.to/coly010/the-factory-pattern-design-patterns-meet-the-frontend-1p2l"})}),"\n",(0,r.jsx)(e.p,{children:"The Factory Pattern is a creational design pattern that adds an abstraction layer over common base behaviour between multiple objects of a generic type.\nThe client code, the code that will use this layer, does not need to know the specifics of the implementation of the behaviour, as long as it exists."}),"\n",(0,r.jsx)(e.p,{children:"UML Diagram to illustrate it:"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://media2.dev.to/dynamic/image/width=800%2Cheight=%2Cfit=scale-down%2Cgravity=auto%2Cformat=auto/https%3A%2F%2Fthepracticaldev.s3.amazonaws.com%2Fi%2Fhmeoq57v3cj12a329sng.png",children:"uml-diagram-factory-pattern"})})]})}function p(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(l,{...t})}):l(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>s,x:()=>c});var a=n(6540);const r={},o=a.createContext(r);function s(t){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:s(t.components),a.createElement(o.Provider,{value:e},t.children)}}}]);