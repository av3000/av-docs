"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[8032],{9889:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"frontend/angular/design-patterns/index","title":"Angular Design Patterns","description":"https://github.com/amosISA/angular-design-patterns","source":"@site/docs/frontend/angular/design-patterns/index.md","sourceDirName":"frontend/angular/design-patterns","slug":"/frontend/angular/design-patterns/","permalink":"/av-docs/docs/frontend/angular/design-patterns/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/angular/design-patterns/index.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_label":"Intro","sidebar_position":1}}');var a=t(4848),s=t(8453);const o={sidebar_label:"Intro",sidebar_position:1},i="Angular Design Patterns",l={},c=[{value:"List of Patterns",id:"list-of-patterns",level:2},{value:"Creational Patterns",id:"creational-patterns",level:3},{value:"Creational Pattern Examples",id:"creational-pattern-examples",level:3},{value:"Structural Patterns",id:"structural-patterns",level:3},{value:"Structural Pattern Examples",id:"structural-pattern-examples",level:3},{value:"Behavioural Patterns",id:"behavioural-patterns",level:3},{value:"Behavioural Pattern Examples",id:"behavioural-pattern-examples",level:3},{value:"Inversion of Control Pattern (With DI)",id:"inversion-of-control-pattern-with-di",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"angular-design-patterns",children:"Angular Design Patterns"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://github.com/amosISA/angular-design-patterns",children:"https://github.com/amosISA/angular-design-patterns"})," ",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.a,{href:"https://angular.love/overview-of-oop-patterns-implementation-in-javascript",children:"https://angular.love/overview-of-oop-patterns-implementation-in-javascript"})," ",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(n.h2,{id:"list-of-patterns",children:"List of Patterns"}),"\n",(0,a.jsx)(n.h3,{id:"creational-patterns",children:"Creational Patterns"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/creational-patterns/",children:"Creational Patterns"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/creational-patterns/singleton",children:"Singleton"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/creational-patterns/factory-method",children:"Factory Method"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/creational-patterns/abstract-factory",children:"Abstract Factory"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/creational-patterns/builder",children:"Builder"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/creational-patterns/prototype",children:"Prototype"})}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"creational-pattern-examples",children:"Creational Pattern Examples"}),"\n",(0,a.jsx)(n.p,{children:"Creational patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code."}),"\n",(0,a.jsxs)(n.p,{children:["Singleton Pattern\nUse case: Shared service instances across the application\nExample: Angular's built-in services like HttpClient\nHow to find: Look for ",(0,a.jsx)(n.code,{children:"@Injectable({ providedIn: 'root' })"})," decorators"]}),"\n",(0,a.jsx)(n.p,{children:"Factory Method Pattern\nUse case: Creating objects without specifying the exact class of object to be created\nExample: Using a service to create different types of form controls\nHow to find: Look for methods that return instances of a common interface or base class"}),"\n",(0,a.jsx)(n.p,{children:"Builder Pattern\nUse case: Complex object construction\nExample: Using FormBuilder to create complex reactive forms\nHow to find: Look for FormBuilder injection and usage in component files"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"structural-patterns",children:"Structural Patterns"}),"\n",(0,a.jsx)(n.p,{children:"Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/adapter",children:"Adapter"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/bridge",children:"Bridge"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/composite",children:"Composite"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/decorator",children:"Decorator"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/facade",children:"Facade"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/flyweight",children:"Flyweight"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/proxy",children:"Proxy"})}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"structural-pattern-examples",children:"Structural Pattern Examples"}),"\n",(0,a.jsx)(n.p,{children:"Decorator Pattern\nUse case: Adding behavior to components or services without modifying their code\nExample: Using Angular decorators like @Component, @Injectable, or custom property decorators\nHow to find: Look for @ symbols followed by decorator names in class definitions"}),"\n",(0,a.jsx)(n.p,{children:"Proxy Pattern\nUse case: Lazy loading of modules or components\nExample: Using Angular's router for lazy loading feature modules\nHow to find: Check RouterModule configurations in app routing files for lazy-loaded routes"}),"\n",(0,a.jsx)(n.p,{children:"Composite Pattern\nUse case: Building complex UI structures from simpler components\nExample: Nested components in Angular templates\nHow to find: Analyze component templates for nested custom elements"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"behavioural-patterns",children:"Behavioural Patterns"}),"\n",(0,a.jsx)(n.p,{children:"Behavioral patterns are concerned with algorithms and the assignment of responsibilities between objects."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/chain-of-responsibility",children:"Chain of Responsibility"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/command",children:"Command"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/iterator",children:"Iterator"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/mediator",children:"Mediator"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/memento",children:"Memento"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/observer",children:"Observer"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/state",children:"State"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/strategy",children:"Strategy"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/template-method",children:"Template Method"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/design-patterns/behavioural-patterns/visitor",children:"Visitor"})}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"behavioural-pattern-examples",children:"Behavioural Pattern Examples"}),"\n",(0,a.jsx)(n.p,{children:"Observer Pattern\nUse case: Reactive programming with RxJS\nExample: Using Subject or BehaviorSubject for state management\nHow to find: Look for RxJS import statements and usage of Observables in services and components"}),"\n",(0,a.jsx)(n.p,{children:"Strategy Pattern\nUse case: Implementing different algorithms or strategies that can be switched at runtime\nExample: Using different validation strategies in reactive forms\nHow to find: Search for classes or functions that implement a common interface but with different logic"}),"\n",(0,a.jsx)(n.p,{children:"Command Pattern\nUse case: Encapsulating a request as an object\nExample: Implementing undo/redo functionality or action creators in NgRx\nHow to find: Look for classes that encapsulate all information needed to perform an action or trigger an event"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"inversion-of-control-pattern-with-di",children:"Inversion of Control Pattern (With DI)"}),"\n",(0,a.jsxs)(n.p,{children:["This pattern focuses on reversing the responsibility of creating and managing objects from one class to another. Instead of a class having the responsibility of creating and managing its dependencies, the main class provides the dependencies through a ",(0,a.jsx)(n.strong,{children:"dependency injection container"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["This means that the main class does not worry about how the dependencies are created or managed, but simply relies on the dependency injection container to provide them. This allows for greater flexibility in the code, as dependencies can be easily replaced and modified without affecting the main class. Improves the clarity and readability of the code by separating the responsibility of creating and managing objects from the main logic of the application. This pattern is essential for large and complex applications, where dependency management can be a challenge. In Angular is implemented using the ",(0,a.jsx)(n.strong,{children:"Dependency Injection"}),". Instead of making API fetch request from the main component, we can have service component handling this responsibility."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Dependency Injection"})," allows your components or services to borrow other components or services they need to function."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Improves the organization and readability of the code by separating the responsibilities of each component or service."}),"\n",(0,a.jsx)(n.li,{children:"Facilitates testing and maintenance of the code, as it is easier to change or replace a specific component or service without affecting others."}),"\n",(0,a.jsx)(n.li,{children:"Allows different components or services to share information and work together efficiently."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Example of ",(0,a.jsx)(n.a,{href:"/av-docs/docs/frontend/angular/dependency-injection#di-mechanism",children:"Dependency Injection in Angular"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(private http: HttpClient) { }\n\n  getData() {\n    return this.http.get('https://api.example.com/data');\n  }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(6540);const a={},s=r.createContext(a);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);