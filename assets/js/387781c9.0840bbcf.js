"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[9029],{6205:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"frontend/styling/frameworks/css-in-js/panda-css","title":"Panda CSS","description":"Panda CSS is a modern, zero-runtime CSS-in-JS framework designed by the creators of Chakra UI. It combines the benefits of CSS-in-JS with the performance advantages of build-time CSS generation, focusing on type safety, developer experience, and atomic CSS principles.","source":"@site/docs/frontend/styling/frameworks/css-in-js/panda-css.md","sourceDirName":"frontend/styling/frameworks/css-in-js","slug":"/frontend/styling/frameworks/css-in-js/panda-css","permalink":"/av-docs/docs/frontend/styling/frameworks/css-in-js/panda-css","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/styling/frameworks/css-in-js/panda-css.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"Implementation Approaches","permalink":"/av-docs/docs/frontend/styling/frameworks/css-in-js/"},"next":{"title":"StyleX","permalink":"/av-docs/docs/frontend/styling/frameworks/css-in-js/stylex"}}');var r=s(4848),t=s(8453);const a={},o="Panda CSS",l={},d=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Zero-Runtime Approach",id:"zero-runtime-approach",level:3},{value:"Atomic CSS",id:"atomic-css",level:3},{value:"Design Token System",id:"design-token-system",level:3},{value:"TypeScript Integration",id:"typescript-integration",level:3},{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Basic Installation",id:"basic-installation",level:3},{value:"Initialize Panda CSS",id:"initialize-panda-css",level:3},{value:"Configuration File",id:"configuration-file",level:3},{value:"Add Build Scripts",id:"add-build-scripts",level:3},{value:"Framework Integration",id:"framework-integration",level:3},{value:"Next.js App Router",id:"nextjs-app-router",level:4},{value:"Vite/React",id:"vitereact",level:4},{value:"Core APIs",id:"core-apis",level:2},{value:"css Function",id:"css-function",level:3},{value:"cva (Component Variant API)",id:"cva-component-variant-api",level:3},{value:"pattern Function",id:"pattern-function",level:3},{value:"styled Function",id:"styled-function",level:3},{value:"JSX Style Props",id:"jsx-style-props",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Recipes (Style Compositions)",id:"recipes-style-compositions",level:3},{value:"Conditional Styles",id:"conditional-styles",level:3},{value:"Responsive Styles",id:"responsive-styles",level:3},{value:"Theme Tokens",id:"theme-tokens",level:3},{value:"Semantic Tokens",id:"semantic-tokens",level:3},{value:"Dark Mode",id:"dark-mode",level:3},{value:"Panda CSS in the CSS-in-JS Ecosystem",id:"panda-css-in-the-css-in-js-ecosystem",level:2},{value:"Evolution from Chakra UI",id:"evolution-from-chakra-ui",level:3},{value:"Comparison with Other Zero-Runtime Solutions",id:"comparison-with-other-zero-runtime-solutions",level:3},{value:"When to Use Panda CSS",id:"when-to-use-panda-css",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Organization",id:"organization",level:3},{value:"Performance",id:"performance",level:3},{value:"Maintainability",id:"maintainability",level:3},{value:"TypeScript Integration",id:"typescript-integration-1",level:3},{value:"Resources",id:"resources",level:2}];function c(n){const e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"panda-css",children:"Panda CSS"})}),"\n",(0,r.jsx)(e.p,{children:"Panda CSS is a modern, zero-runtime CSS-in-JS framework designed by the creators of Chakra UI. It combines the benefits of CSS-in-JS with the performance advantages of build-time CSS generation, focusing on type safety, developer experience, and atomic CSS principles."}),"\n",(0,r.jsx)(e.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,r.jsx)(e.h3,{id:"zero-runtime-approach",children:"Zero-Runtime Approach"}),"\n",(0,r.jsx)(e.p,{children:"Panda CSS is a zero-runtime solution that processes your styles at build time:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"No runtime JavaScript overhead"}),"\n",(0,r.jsx)(e.li,{children:"Static CSS extraction for optimal performance"}),"\n",(0,r.jsx)(e.li,{children:"No style recalculation during rendering"}),"\n",(0,r.jsx)(e.li,{children:"Works seamlessly with SSR and React Server Components"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"atomic-css",children:"Atomic CSS"}),"\n",(0,r.jsx)(e.p,{children:"Panda uses an atomic CSS approach to minimize CSS output:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"// Instead of this CSS\n.button {\n  padding: 8px 16px;\n  background-color: blue;\n  color: white;\n  border-radius: 4px;\n}\n\n// Panda generates atomic classes like these\n.p_8px_16px { padding: 8px 16px; }\n.bg_blue { background-color: blue; }\n.text_white { color: white; }\n.rounded_4px { border-radius: 4px; }\n"})}),"\n",(0,r.jsx)(e.h3,{id:"design-token-system",children:"Design Token System"}),"\n",(0,r.jsx)(e.p,{children:"Panda is built around a robust design token system:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'// tokens.config.ts\nexport default defineTokens({\n  colors: {\n    primary: { value: "#3b82f6" },\n    secondary: { value: "#10b981" },\n    // More colors...\n  },\n  spacing: {\n    sm: { value: "0.5rem" },\n    md: { value: "1rem" },\n    lg: { value: "2rem" },\n    // More spacing values...\n  },\n  // More token categories...\n});\n'})}),"\n",(0,r.jsx)(e.h3,{id:"typescript-integration",children:"TypeScript Integration"}),"\n",(0,r.jsx)(e.p,{children:"Full TypeScript support for catching errors at compile time:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'import { css } from "../styled-system/css";\n\n// Type safe - Will give error if \'primary\' isn\'t a valid color\nconst validStyle = css({ color: "primary", padding: "md" });\n\n// Type error - \'invalid-color\' doesn\'t exist in your tokens\nconst invalidStyle = css({ color: "invalid-color" });\n'})}),"\n",(0,r.jsx)(e.h2,{id:"installation-and-setup",children:"Installation and Setup"}),"\n",(0,r.jsx)(e.h3,{id:"basic-installation",children:"Basic Installation"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Using npm\nnpm install -D @pandacss/dev\n\n# Using yarn\nyarn add -D @pandacss/dev\n\n# Using pnpm\npnpm add -D @pandacss/dev\n"})}),"\n",(0,r.jsx)(e.h3,{id:"initialize-panda-css",children:"Initialize Panda CSS"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"npx panda init\n"})}),"\n",(0,r.jsx)(e.p,{children:"This creates three configuration files:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"panda.config.ts"}),": Main configuration"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"styled-system"}),": Generated files directory"]}),"\n",(0,r.jsx)(e.li,{children:"Various theme files (optional)"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"configuration-file",children:"Configuration File"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:'// panda.config.ts\nimport { defineConfig } from "@pandacss/dev";\n\nexport default defineConfig({\n  // Output directory for generated files\n  outdir: "styled-system",\n\n  // Files to analyze for used styles\n  include: ["./src/**/*.{js,jsx,ts,tsx}"],\n\n  // Files to exclude\n  exclude: [],\n\n  // Theme configuration\n  theme: {\n    extend: {\n      tokens: {\n        colors: {\n          primary: { value: "#3b82f6" },\n          secondary: { value: "#10b981" },\n        },\n      },\n    },\n  },\n\n  // Enable JSX style props\n  jsxFramework: "react",\n\n  // Set up styling patterns\n  patterns: {\n    extend: {\n      // Custom patterns\n      card: {\n        properties: {\n          variant: { type: "enum", value: ["elevated", "outline"] },\n        },\n        transform(props) {\n          const { variant, ...rest } = props;\n          return {\n            p: "4",\n            borderRadius: "md",\n            ...(variant === "elevated" && { boxShadow: "md" }),\n            ...(variant === "outline" && { borderWidth: "1px" }),\n            ...rest,\n          };\n        },\n      },\n    },\n  },\n\n  // Utilities configuration\n  utilities: {\n    extend: {\n      // Custom utilities\n    },\n  },\n});\n'})}),"\n",(0,r.jsx)(e.h3,{id:"add-build-scripts",children:"Add Build Scripts"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'{\n  "scripts": {\n    "prepare": "panda codegen",\n    "dev": "panda watch",\n    "build": "panda codegen"\n  }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"framework-integration",children:"Framework Integration"}),"\n",(0,r.jsx)(e.h4,{id:"nextjs-app-router",children:"Next.js App Router"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:'// next.config.js\nconst { createPreset } = require("@pandacss/dev/presets");\n\n/** @type {import(\'next\').NextConfig} */\nconst nextConfig = {\n  transpilePackages: ["@pandacss/dev"],\n};\n\nmodule.exports = nextConfig;\n'})}),"\n",(0,r.jsx)(e.h4,{id:"vitereact",children:"Vite/React"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:'// vite.config.ts\nimport { defineConfig } from "vite";\nimport react from "@vitejs/plugin-react";\n\nexport default defineConfig({\n  plugins: [react()],\n});\n'})}),"\n",(0,r.jsx)(e.h2,{id:"core-apis",children:"Core APIs"}),"\n",(0,r.jsx)(e.h3,{id:"css-function",children:"css Function"}),"\n",(0,r.jsx)(e.p,{children:"Create style objects from token-aware properties:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'import { css } from "../styled-system/css";\n\nfunction Button() {\n  return (\n    <button\n      className={css({\n        display: "flex",\n        alignItems: "center",\n        justifyContent: "center",\n        padding: "10px 16px",\n        borderRadius: "md",\n        backgroundColor: "primary",\n        color: "white",\n        _hover: { backgroundColor: "primary.600" },\n      })}\n    >\n      Button\n    </button>\n  );\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"cva-component-variant-api",children:"cva (Component Variant API)"}),"\n",(0,r.jsx)(e.p,{children:"Create components with variants:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'import { cva } from "../styled-system/css";\n\nconst button = cva({\n  base: {\n    display: "flex",\n    alignItems: "center",\n    justifyContent: "center",\n    borderRadius: "md",\n    fontWeight: "medium",\n  },\n  variants: {\n    size: {\n      sm: { padding: "6px 12px", fontSize: "sm" },\n      md: { padding: "8px 16px", fontSize: "md" },\n      lg: { padding: "12px 24px", fontSize: "lg" },\n    },\n    variant: {\n      primary: { backgroundColor: "primary", color: "white" },\n      secondary: { backgroundColor: "gray.200", color: "gray.800" },\n      outline: { borderWidth: "1px", borderColor: "current" },\n    },\n  },\n  defaultVariants: {\n    size: "md",\n    variant: "primary",\n  },\n});\n\nfunction Button({ size, variant, children }) {\n  return <button className={button({ size, variant })}>{children}</button>;\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"pattern-function",children:"pattern Function"}),"\n",(0,r.jsx)(e.p,{children:"Use predefined style patterns:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'import { pattern } from "../styled-system/patterns";\n\nfunction Card({ title, content }) {\n  return (\n    <div className={pattern.flex({ direction: "column", gap: "4" })}>\n      <h2>{title}</h2>\n      <p>{content}</p>\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Built-in patterns include:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"flex"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"grid"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"stack"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"wrap"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"container"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"hstack"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"vstack"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.code,{children:"spacer"})}),"\n",(0,r.jsx)(e.li,{children:"And any custom patterns you define"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"styled-function",children:"styled Function"}),"\n",(0,r.jsx)(e.p,{children:"Create styled components with token-aware props:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:"import { styled } from '../styled-system/jsx'\n\nconst Button = styled('button', {\n  base: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 'md',\n    fontWeight: 'medium',\n  },\n  variants: {\n    size: {\n      sm: { padding: '6px 12px', fontSize: 'sm' },\n      md: { padding: '8px 16px', fontSize: 'md' },\n      lg: { padding: '12px 24px', fontSize: 'lg' },\n    },\n    variant: {\n      primary: { backgroundColor: 'primary', color: 'white' },\n      secondary: { backgroundColor: 'gray.200', color: 'gray.800' },\n      outline: { borderWidth: '1px', borderColor: 'current' },\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n    variant: 'primary',\n  },\n})\n\n// Usage\n<Button size=\"lg\" variant=\"outline\">Click me</Button>\n"})}),"\n",(0,r.jsx)(e.h3,{id:"jsx-style-props",children:"JSX Style Props"}),"\n",(0,r.jsx)(e.p,{children:"Use style props directly on JSX elements:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'import { jsx } from "../styled-system/jsx";\n\nfunction Component() {\n  return (\n    <jsx.div\n      display="flex"\n      flexDirection="column"\n      padding="4"\n      backgroundColor="gray.100"\n      color="gray.900"\n      borderRadius="md"\n    >\n      Content with style props\n    </jsx.div>\n  );\n}\n\n// Or with the \'styled\' import\nimport { styled } from "../styled-system/jsx";\n\nfunction AnotherComponent() {\n  return (\n    <styled.div\n      display="flex"\n      flexDirection="column"\n      padding="4"\n      backgroundColor="gray.100"\n      color="gray.900"\n      borderRadius="md"\n    >\n      Content with style props\n    </styled.div>\n  );\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,r.jsx)(e.h3,{id:"recipes-style-compositions",children:"Recipes (Style Compositions)"}),"\n",(0,r.jsx)(e.p,{children:"Create reusable style compositions:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'// panda.config.ts\nexport default defineConfig({\n  // ...other config\n  recipes: {\n    button: {\n      description: "Button component",\n      base: {\n        display: "flex",\n        alignItems: "center",\n        justifyContent: "center",\n        borderRadius: "md",\n        fontWeight: "medium",\n      },\n      variants: {\n        size: {\n          sm: { padding: "6px 12px", fontSize: "sm" },\n          md: { padding: "8px 16px", fontSize: "md" },\n          lg: { padding: "12px 24px", fontSize: "lg" },\n        },\n        variant: {\n          primary: { backgroundColor: "primary", color: "white" },\n          secondary: { backgroundColor: "gray.200", color: "gray.800" },\n          outline: { borderWidth: "1px", borderColor: "current" },\n        },\n      },\n      defaultVariants: {\n        size: "md",\n        variant: "primary",\n      },\n    },\n  },\n});\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'import { recipe } from "../styled-system/recipes";\n\nfunction Button({ size, variant, children }) {\n  return (\n    <button className={recipe.button({ size, variant })}>{children}</button>\n  );\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"conditional-styles",children:"Conditional Styles"}),"\n",(0,r.jsx)(e.p,{children:"Apply styles conditionally:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'import { css } from "../styled-system/css";\n\nfunction Component({ isActive, isDisabled }) {\n  return (\n    <div\n      className={css({\n        color: "gray.800",\n        backgroundColor: "white",\n        padding: "4",\n        ...(isActive && {\n          fontWeight: "bold",\n          color: "primary",\n        }),\n        ...(isDisabled && {\n          opacity: 0.5,\n          cursor: "not-allowed",\n        }),\n      })}\n    >\n      Content\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"responsive-styles",children:"Responsive Styles"}),"\n",(0,r.jsx)(e.p,{children:"Apply styles at different breakpoints:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'import { css } from "../styled-system/css";\n\nfunction ResponsiveComponent() {\n  return (\n    <div\n      className={css({\n        width: "100%",\n        padding: "4",\n        fontSize: { base: "md", md: "lg", lg: "xl" },\n        flexDirection: { base: "column", md: "row" },\n        gap: { base: "2", md: "4", lg: "6" },\n      })}\n    >\n      Responsive content\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"theme-tokens",children:"Theme Tokens"}),"\n",(0,r.jsx)(e.p,{children:"Panda CSS allows you to define and use theme tokens:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:'// tokens.config.ts\nimport { defineTokens } from "@pandacss/dev";\n\nexport default defineTokens({\n  colors: {\n    primary: { value: "#3b82f6" },\n    gray: {\n      50: { value: "#f9fafb" },\n      100: { value: "#f3f4f6" },\n      // More shades...\n      900: { value: "#111827" },\n    },\n  },\n  spacing: {\n    "1": { value: "0.25rem" },\n    "2": { value: "0.5rem" },\n    // More values...\n  },\n  fontSizes: {\n    xs: { value: "0.75rem" },\n    sm: { value: "0.875rem" },\n    // More sizes...\n  },\n  radii: {\n    sm: { value: "0.125rem" },\n    md: { value: "0.25rem" },\n    // More values...\n  },\n  // Other token categories...\n});\n'})}),"\n",(0,r.jsx)(e.h3,{id:"semantic-tokens",children:"Semantic Tokens"}),"\n",(0,r.jsx)(e.p,{children:"Create semantic tokens based on low-level design tokens:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:'// semantic-tokens.config.ts\nimport { defineSemanticTokens } from "@pandacss/dev";\n\nexport default defineSemanticTokens({\n  colors: {\n    background: {\n      value: {\n        base: "{colors.white}",\n        _dark: "{colors.gray.900}",\n      },\n    },\n    text: {\n      value: {\n        base: "{colors.gray.900}",\n        _dark: "{colors.gray.100}",\n      },\n    },\n    // More semantic colors...\n  },\n});\n'})}),"\n",(0,r.jsx)(e.h3,{id:"dark-mode",children:"Dark Mode"}),"\n",(0,r.jsx)(e.p,{children:"Implement dark mode with semantic tokens:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'import { css } from "../styled-system/css";\n\nfunction ThemeComponent() {\n  return (\n    <div\n      className={css({\n        backgroundColor: "background",\n        color: "text",\n        padding: "4",\n        borderRadius: "md",\n      })}\n    >\n      Content that adapts to theme\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Toggle dark mode with a class or attribute:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<html class="dark">\n  \x3c!-- Dark mode enabled --\x3e\n</html>\n'})}),"\n",(0,r.jsx)(e.h2,{id:"panda-css-in-the-css-in-js-ecosystem",children:"Panda CSS in the CSS-in-JS Ecosystem"}),"\n",(0,r.jsx)(e.p,{children:"Panda CSS represents the evolution of CSS-in-JS beyond runtime solutions, addressing many of the performance concerns that led developers away from traditional CSS-in-JS libraries."}),"\n",(0,r.jsx)(e.h3,{id:"evolution-from-chakra-ui",children:"Evolution from Chakra UI"}),"\n",(0,r.jsx)(e.p,{children:"Panda CSS was created by the team behind Chakra UI, drawing on their experience to build a more performant styling solution:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"From Runtime to Build Time"}),": Chakra UI used Emotion (runtime CSS-in-JS), while Panda CSS generates static CSS"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Style Props Maintained"}),": Kept the developer-friendly style props API from Chakra UI"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Token System Enhanced"}),": Expanded the design token system for even more flexibility"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"As Segun Adebayo, creator of Chakra UI and Panda CSS, explains:"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:'"Panda CSS takes the best parts of Chakra UI\'s developer experience and combines it with the performance benefits of build-time CSS generation and atomic CSS principles."'}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"comparison-with-other-zero-runtime-solutions",children:"Comparison with Other Zero-Runtime Solutions"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Feature"}),(0,r.jsx)(e.th,{children:"Panda CSS"}),(0,r.jsx)(e.th,{children:"StyleX"}),(0,r.jsx)(e.th,{children:"vanilla-extract"}),(0,r.jsx)(e.th,{children:"Stitches"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Created By"})}),(0,r.jsx)(e.td,{children:"Chakra UI team"}),(0,r.jsx)(e.td,{children:"Meta"}),(0,r.jsx)(e.td,{children:"Mark Dalgleish"}),(0,r.jsx)(e.td,{children:"WorkOS"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Approach"})}),(0,r.jsx)(e.td,{children:"Atomic + JSX props"}),(0,r.jsx)(e.td,{children:"Atomic classes"}),(0,r.jsx)(e.td,{children:"CSS Modules-like"}),(0,r.jsx)(e.td,{children:"Near-zero runtime"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"TypeScript"})}),(0,r.jsx)(e.td,{children:"Strong"}),(0,r.jsx)(e.td,{children:"Strong"}),(0,r.jsx)(e.td,{children:"Strong"}),(0,r.jsx)(e.td,{children:"Strong"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Style Composition"})}),(0,r.jsx)(e.td,{children:"Recipes & Patterns"}),(0,r.jsx)(e.td,{children:"StyleX.compose"}),(0,r.jsx)(e.td,{children:"recipe API"}),(0,r.jsx)(e.td,{children:"Variants API"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Design Tokens"})}),(0,r.jsx)(e.td,{children:"Comprehensive"}),(0,r.jsx)(e.td,{children:"Basic"}),(0,r.jsx)(e.td,{children:"Theme contract"}),(0,r.jsx)(e.td,{children:"Theme tokens"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Framework Dependency"})}),(0,r.jsx)(e.td,{children:"Framework agnostic"}),(0,r.jsx)(e.td,{children:"Framework agnostic"}),(0,r.jsx)(e.td,{children:"Framework agnostic"}),(0,r.jsx)(e.td,{children:"React focused"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Learning Curve"})}),(0,r.jsx)(e.td,{children:"Medium"}),(0,r.jsx)(e.td,{children:"Medium"}),(0,r.jsx)(e.td,{children:"Medium"}),(0,r.jsx)(e.td,{children:"Low-Medium"})]})]})]}),"\n",(0,r.jsx)(e.h2,{id:"when-to-use-panda-css",children:"When to Use Panda CSS"}),"\n",(0,r.jsx)(e.p,{children:"Panda CSS is particularly well-suited for:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"React/Next.js projects"}),": Full integration with modern React patterns"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Design system development"}),": Strong token system and component patterns"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Performance-critical applications"}),": Zero-runtime approach eliminates CSS-in-JS overhead"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Chakra UI users"}),": Familiar API and concepts for Chakra UI developers"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"TypeScript projects"}),": Strong type safety throughout the styling system"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Server-side rendering"}),": Works perfectly with SSR and React Server Components"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"It might not be ideal for:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Simple static sites"}),": Setup may be overkill for basic websites"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Projects without a build step"}),": Requires a build process"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Teams preferring traditional CSS"}),": Learning curve for CSS-first developers"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(e.h3,{id:"organization",children:"Organization"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Structure tokens systematically"}),": Organize design tokens by purpose and meaning"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Create semantic tokens"}),": Abstract away direct values with meaningful names"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Use patterns for layout"}),": Leverage built-in patterns for consistent spacing"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"performance",children:"Performance"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Minimize style recalculation"}),": Avoid dynamic class string concatenation"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Use recipes for complex components"}),": Recipes generate optimized atomic classes"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Leverage atomic CSS generation"}),": Let Panda optimize your CSS output"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"maintainability",children:"Maintainability"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Create component libraries"}),": Abstract repeated patterns into components"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Document your token system"}),": Create a style guide with your theme tokens"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Use semantic naming"}),": Create meaningful names for tokens and patterns"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"typescript-integration-1",children:"TypeScript Integration"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Take advantage of type checking"}),": Let TypeScript catch style errors"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Create type-safe component APIs"}),": Define proper types for styled components"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Extract types from your theme"}),": Use Panda's utility types for props"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"resources",children:"Resources"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://panda-css.com/",children:"Panda CSS Documentation"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://github.com/chakra-ui/panda",children:"Panda CSS GitHub Repository"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://discord.gg/VQrkpsgSx7",children:"Panda CSS Discord Community"})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://www.youtube.com/watch?v=QxA-KB2lKgU",children:"Styling with Panda CSS"})," - YouTube tutorial"]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://panda-css.com/playground",children:"Panda CSS Playground"})}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://www.adebayosegun.com/blog/why-we-are-building-panda-css",children:"Why We're Building Panda CSS"})," - By Segun Adebayo"]}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://panda-css.com/docs/comparisons/tailwind-css",children:"Panda CSS vs. Tailwind CSS"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://panda-css.com/docs/migration/from-chakra-ui",children:"Migration from Chakra UI"})}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>a,x:()=>o});var i=s(6540);const r={},t=i.createContext(r);function a(n){const e=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);