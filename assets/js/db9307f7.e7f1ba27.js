"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[6063],{6560:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"frontend/styling/frameworks/css-in-js/tokenami","title":"Tokenami","description":"Tokenami is a zero-runtime, token-based CSS-in-JS solution created by Sunil Pai and the team behind Stitches. It\'s designed to provide type-safe styling with a focus on design tokens, responsive styles, and build-time CSS generation.","source":"@site/docs/frontend/styling/frameworks/css-in-js/tokenami.md","sourceDirName":"frontend/styling/frameworks/css-in-js","slug":"/frontend/styling/frameworks/css-in-js/tokenami","permalink":"/av-docs/docs/frontend/styling/frameworks/css-in-js/tokenami","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/styling/frameworks/css-in-js/tokenami.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"Tamagui","permalink":"/av-docs/docs/frontend/styling/frameworks/css-in-js/tamagui"},"next":{"title":"Utility-First CSS","permalink":"/av-docs/docs/frontend/styling/frameworks/utility-first/"}}');var i=s(4848),r=s(8453);const o={},l="Tokenami",a={},c=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Basic Configuration",id:"basic-configuration",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Styling with the css Function",id:"styling-with-the-css-function",level:3},{value:"Using Theme Tokens",id:"using-theme-tokens",level:3},{value:"Responsive Styles",id:"responsive-styles",level:3},{value:"Variant Patterns",id:"variant-patterns",level:3},{value:"Key Features",id:"key-features",level:2},{value:"1. Zero-Runtime Architecture",id:"1-zero-runtime-architecture",level:3},{value:"2. Token-First Design",id:"2-token-first-design",level:3},{value:"3. Theme Switching",id:"3-theme-switching",level:3},{value:"4. Responsive Design",id:"4-responsive-design",level:3},{value:"5. Type Safety",id:"5-type-safety",level:3},{value:"Tokenami vs. Other CSS-in-JS Solutions",id:"tokenami-vs-other-css-in-js-solutions",level:2},{value:"Compared to Runtime CSS-in-JS (styled-components, Emotion)",id:"compared-to-runtime-css-in-js-styled-components-emotion",level:3},{value:"Compared to StyleX",id:"compared-to-stylex",level:3},{value:"Compared to Tamagui",id:"compared-to-tamagui",level:3},{value:"Tokenami in the CSS-in-JS Evolution",id:"tokenami-in-the-css-in-js-evolution",level:2},{value:"When to Use Tokenami",id:"when-to-use-tokenami",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Resources",id:"resources",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"tokenami",children:"Tokenami"})}),"\n",(0,i.jsx)(n.p,{children:"Tokenami is a zero-runtime, token-based CSS-in-JS solution created by Sunil Pai and the team behind Stitches. It's designed to provide type-safe styling with a focus on design tokens, responsive styles, and build-time CSS generation."}),"\n",(0,i.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(n.p,{children:"Tokenami emphasizes several key principles:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Design Token Centricity"}),": Built around design tokens from the ground up"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Static Extraction"}),": Generates CSS at build time, not runtime"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type Safety"}),": Full TypeScript integration for catching errors early"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Theme Switching"}),": First-class support for themes including dark mode"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Responsive Design"}),": Built-in responsive token handling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Variant Support"}),": Strong support for component variants"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"installation-and-setup",children:"Installation and Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @tokenami/css\n"})}),"\n",(0,i.jsx)(n.p,{children:"For build tool integration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# For Next.js\nnpm install @tokenami/dev\n\n# Add to next.config.js\nconst { withTokenami } = require('@tokenami/dev');\n\nmodule.exports = withTokenami({\n  // Your Next.js config\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,i.jsx)(n.p,{children:"First, define your tokens and create a configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'// tokens.ts\nimport { createTokens } from "@tokenami/css";\n\nexport const tokens = createTokens({\n  colors: {\n    primary: {\n      50: "#eff6ff",\n      100: "#dbeafe",\n      500: "#3b82f6",\n      600: "#2563eb",\n      700: "#1d4ed8",\n    },\n    neutral: {\n      50: "#fafafa",\n      100: "#f5f5f5",\n      900: "#171717",\n    },\n  },\n  space: {\n    1: "4px",\n    2: "8px",\n    3: "16px",\n    4: "24px",\n    5: "32px",\n    6: "48px",\n  },\n  radii: {\n    sm: "2px",\n    md: "4px",\n    lg: "8px",\n    round: "9999px",\n  },\n  fontSizes: {\n    sm: "0.875rem",\n    md: "1rem",\n    lg: "1.125rem",\n    xl: "1.25rem",\n  },\n  // Additional token categories as needed\n});\n\nexport type AppTokens = typeof tokens;\n'})}),"\n",(0,i.jsx)(n.p,{children:"Then create your themes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'// themes.ts\nimport { createTheme } from "@tokenami/css";\nimport { tokens } from "./tokens";\n\nexport const lightTheme = createTheme("light", {\n  colors: {\n    background: tokens.colors.neutral[50],\n    text: tokens.colors.neutral[900],\n    primary: tokens.colors.primary[500],\n    primaryHover: tokens.colors.primary[600],\n  },\n});\n\nexport const darkTheme = createTheme("dark", {\n  colors: {\n    background: tokens.colors.neutral[900],\n    text: tokens.colors.neutral[50],\n    primary: tokens.colors.primary[600],\n    primaryHover: tokens.colors.primary[700],\n  },\n});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.h3,{id:"styling-with-the-css-function",children:"Styling with the css Function"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { css } from "@tokenami/css";\nimport { tokens } from "./tokens";\n\nconst button = css({\n  padding: `${tokens.space[2]} ${tokens.space[3]}`,\n  backgroundColor: tokens.colors.primary[500],\n  color: "white",\n  borderRadius: tokens.radii.md,\n  fontSize: tokens.fontSizes.md,\n  border: "none",\n  cursor: "pointer",\n\n  ":hover": {\n    backgroundColor: tokens.colors.primary[600],\n  },\n});\n\nfunction Button({ children }) {\n  return <button className={button}>{children}</button>;\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-theme-tokens",children:"Using Theme Tokens"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { css } from "@tokenami/css";\nimport { lightTheme } from "./themes";\n\nconst card = css({\n  backgroundColor: lightTheme.colors.background,\n  color: lightTheme.colors.text,\n  padding: tokens.space[4],\n  borderRadius: tokens.radii.lg,\n  boxShadow: "0 1px 3px rgba(0,0,0,0.12)",\n});\n\nfunction Card({ children }) {\n  return <div className={card}>{children}</div>;\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"responsive-styles",children:"Responsive Styles"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { css } from "@tokenami/css";\nimport { tokens } from "./tokens";\n\nconst container = css({\n  display: "flex",\n  flexDirection: "column",\n  padding: tokens.space[3],\n\n  // Responsive styles\n  "@media (min-width: 768px)": {\n    flexDirection: "row",\n    padding: tokens.space[4],\n  },\n\n  "@media (min-width: 1024px)": {\n    maxWidth: "1200px",\n    margin: "0 auto",\n  },\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"variant-patterns",children:"Variant Patterns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'import { css, cva } from "@tokenami/css";\nimport { tokens } from "./tokens";\nimport { lightTheme } from "./themes";\n\n// Using Component Variant API\nconst buttonStyles = cva({\n  base: {\n    padding: `${tokens.space[2]} ${tokens.space[3]}`,\n    borderRadius: tokens.radii.md,\n    fontWeight: "bold",\n    cursor: "pointer",\n    border: "none",\n  },\n  variants: {\n    intent: {\n      primary: {\n        backgroundColor: lightTheme.colors.primary,\n        color: "white",\n        ":hover": {\n          backgroundColor: lightTheme.colors.primaryHover,\n        },\n      },\n      secondary: {\n        backgroundColor: "transparent",\n        color: lightTheme.colors.primary,\n        border: `1px solid ${lightTheme.colors.primary}`,\n        ":hover": {\n          backgroundColor: tokens.colors.primary[50],\n        },\n      },\n    },\n    size: {\n      small: {\n        fontSize: tokens.fontSizes.sm,\n        padding: `${tokens.space[1]} ${tokens.space[2]}`,\n      },\n      large: {\n        fontSize: tokens.fontSizes.lg,\n        padding: `${tokens.space[3]} ${tokens.space[4]}`,\n      },\n    },\n  },\n  defaultVariants: {\n    intent: "primary",\n    size: "small",\n  },\n});\n\nfunction Button({ intent, size, children }) {\n  return <button className={buttonStyles({ intent, size })}>{children}</button>;\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsx)(n.h3,{id:"1-zero-runtime-architecture",children:"1. Zero-Runtime Architecture"}),"\n",(0,i.jsx)(n.p,{children:"Tokenami extracts all styles at build time:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No runtime CSS processing"}),": All styles are converted to static CSS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No style injection during render"}),": No impact on React's rendering"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No hydration mismatches"}),": Works perfectly with SSR"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Smaller bundle size"}),": No CSS-in-JS runtime code"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-token-first-design",children:"2. Token-First Design"}),"\n",(0,i.jsx)(n.p,{children:"Unlike many CSS-in-JS solutions, Tokenami puts tokens at the center:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'// Define once, use everywhere\nexport const tokens = createTokens({\n  colors: {\n    blue: {\n      50: "#eff6ff",\n      100: "#dbeafe",\n      // ...more shades\n    },\n    // ...more colors\n  },\n  // ...more token categories\n});\n\n// Use in styles\nconst component = css({\n  color: tokens.colors.blue[500],\n  backgroundColor: tokens.colors.blue[50],\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-theme-switching",children:"3. Theme Switching"}),"\n",(0,i.jsx)(n.p,{children:"Tokenami's theming system is designed for efficient theme switching:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'// Define themes based on tokens\nexport const lightTheme = createTheme("light", {\n  colors: {\n    background: tokens.colors.white,\n    text: tokens.colors.gray[900],\n  },\n});\n\nexport const darkTheme = createTheme("dark", {\n  colors: {\n    background: tokens.colors.gray[900],\n    text: tokens.colors.white,\n  },\n});\n\n// Use in components\nconst card = css({\n  backgroundColor: lightTheme.colors.background,\n  color: lightTheme.colors.text,\n});\n\n// Switch themes with a class or data-attribute on a parent element\n// <html class="dark">\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-responsive-design",children:"4. Responsive Design"}),"\n",(0,i.jsx)(n.p,{children:"Tokenami supports responsive design patterns:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'const responsiveText = css({\n  fontSize: tokens.fontSizes.md,\n  lineHeight: 1.5,\n\n  "@media (min-width: 768px)": {\n    fontSize: tokens.fontSizes.lg,\n  },\n\n  "@media (min-width: 1024px)": {\n    fontSize: tokens.fontSizes.xl,\n    lineHeight: 1.6,\n  },\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"5-type-safety",children:"5. Type Safety"}),"\n",(0,i.jsx)(n.p,{children:"Full TypeScript integration ensures your styles are type-safe:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'// Type errors if token doesn\'t exist\nconst invalid = css({\n  color: tokens.colors.nonExistent, // TypeScript error\n  padding: tokens.space[999], // TypeScript error\n});\n\n// Type-safe variants\nconst buttonVariants = cva({\n  variants: {\n    size: {\n      small: {\n        /* styles */\n      },\n      medium: {\n        /* styles */\n      },\n      large: {\n        /* styles */\n      },\n    },\n  },\n});\n\n// TypeScript knows which variants are valid\nbuttonVariants({ size: "medium" }); // OK\nbuttonVariants({ size: "huge" }); // TypeScript error\n'})}),"\n",(0,i.jsx)(n.h2,{id:"tokenami-vs-other-css-in-js-solutions",children:"Tokenami vs. Other CSS-in-JS Solutions"}),"\n",(0,i.jsx)(n.h3,{id:"compared-to-runtime-css-in-js-styled-components-emotion",children:"Compared to Runtime CSS-in-JS (styled-components, Emotion)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Much faster due to zero-runtime approach"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SSR Compatibility"}),": No hydration issues"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bundle Size"}),": Smaller as no runtime JS needed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"React Integration"}),": Works with all React features including Concurrent Mode"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"compared-to-stylex",children:"Compared to StyleX"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Focus"}),": Token-centric vs. atomic CSS-in-JS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"API Style"}),": Object style vs. StyleX's atomic classes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Variants"}),": First-class variant API vs. manual composition"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"compared-to-tamagui",children:"Compared to Tamagui"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Platforms"}),": Web-focused vs. universal (Web + Native)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Components"}),": Styling solution only vs. full component library"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Architecture"}),": Both use build-time optimization"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"tokenami-in-the-css-in-js-evolution",children:"Tokenami in the CSS-in-JS Evolution"}),"\n",(0,i.jsx)(n.p,{children:"Tokenami is part of the shift away from runtime CSS-in-JS toward zero-runtime solutions that address performance concerns. It builds on lessons learned from earlier libraries:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"From Emotion/styled-components"}),": Took the developer experience but removed runtime cost"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"From Stitches"}),": Improved the variant API and token system while removing all runtime code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"From Theme UI/Chakra UI"}),": Adapted the token-centric design but with static extraction"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'As the CSS-in-JS ecosystem has matured, libraries like Tokenami represent a "best of both worlds" approach that combines the developer experience of CSS-in-JS with the performance characteristics of traditional CSS.'}),"\n",(0,i.jsx)(n.h2,{id:"when-to-use-tokenami",children:"When to Use Tokenami"}),"\n",(0,i.jsx)(n.p,{children:"Tokenami is particularly suitable for:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Design system development"}),": The token-centric approach fits well with design systems"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance-critical applications"}),": When runtime CSS-in-JS is causing issues"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Server-side rendered apps"}),": Works perfectly with Next.js and other SSR frameworks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Teams that value type safety"}),": Strong TypeScript integration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Projects moving away from runtime CSS-in-JS"}),": Familiar API for easier migration"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Design your token system first"}),": Think carefully about your design tokens"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use semantic token names"}),": Name tokens by their purpose, not their value"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Leverage the variant API"}),": Use ",(0,i.jsx)(n.code,{children:"cva()"})," for components with multiple variants"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create component libraries"}),": Build reusable, styled components"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consider responsive from the start"}),": Plan your responsive strategy early"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Organize tokens by category"}),": Keep token definitions logical and well-structured"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use theme tokens for color schemes"}),": Leverage theme tokens for light/dark modes"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://tokenami.com/docs/getting-started",children:"Tokenami Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/tokenami/tokenami",children:"Tokenami GitHub Repository"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://frontendmastery.com/posts/the-evolution-of-scalable-css/",children:"The Evolution of CSS-in-JS"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://dev.to/srmagura/why-were-breaking-up-wiht-css-in-js-4g9b",children:"Why Zero-Runtime CSS-in-JS"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=xlQAe9DPx-U",children:"Building Design Systems with Tokens"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);