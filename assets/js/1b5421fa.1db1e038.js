"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[113],{5700:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"system-design/software/grpc/grpc","title":"gRPC","description":"What is gRPC?","source":"@site/docs/system-design/software/grpc/grpc.md","sourceDirName":"system-design/software/grpc","slug":"/system-design/software/grpc/","permalink":"/av-docs/docs/system-design/software/grpc/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/system-design/software/grpc/grpc.md","tags":[],"version":"current","frontMatter":{},"sidebar":"systemDesignSidebar","previous":{"title":"tRPC","permalink":"/av-docs/docs/system-design/software/trpc/"},"next":{"title":"System Design Concepts","permalink":"/av-docs/docs/system-design/concepts/"}}');var t=r(4848),i=r(8453);const a={},o="gRPC",c={},l=[{value:"What is gRPC?",id:"what-is-grpc",level:2},{value:"Key Benefits",id:"key-benefits",level:2},{value:"Why gRPC?",id:"why-grpc",level:2},{value:"Cross-Language Communication",id:"cross-language-communication",level:3},{value:"High Performance by Design",id:"high-performance-by-design",level:3},{value:"Built-in Streaming",id:"built-in-streaming",level:3},{value:"Contract-First Development",id:"contract-first-development",level:3},{value:"Production-Grade Features",id:"production-grade-features",level:3},{value:"Core Principles",id:"core-principles",level:2},{value:"Protocol Buffers (Protobuf)",id:"protocol-buffers-protobuf",level:3},{value:"HTTP/2 Foundation",id:"http2-foundation",level:3},{value:"Service-Oriented Architecture",id:"service-oriented-architecture",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Proto Definition",id:"proto-definition",level:3},{value:"Code Generation",id:"code-generation",level:3},{value:"Service Implementation",id:"service-implementation",level:3},{value:"Server Setup",id:"server-setup",level:2},{value:"Node.js Server",id:"nodejs-server",level:3},{value:"Go Server",id:"go-server",level:3},{value:"Client Setup",id:"client-setup",level:2},{value:"Node.js Client",id:"nodejs-client",level:3},{value:"Browser Client (gRPC-Web)",id:"browser-client-grpc-web",level:3},{value:"React Integration",id:"react-integration",level:3},{value:"Communication Patterns",id:"communication-patterns",level:2},{value:"Unary RPC",id:"unary-rpc",level:3},{value:"Server Streaming",id:"server-streaming",level:3},{value:"Client Streaming",id:"client-streaming",level:3},{value:"Bidirectional Streaming",id:"bidirectional-streaming",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Status Codes",id:"status-codes",level:3},{value:"Error Details",id:"error-details",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Authentication &amp; Security",id:"authentication--security",level:3},{value:"Load Balancing",id:"load-balancing",level:3},{value:"Interceptors/Middleware",id:"interceptorsmiddleware",level:3},{value:"Health Checking",id:"health-checking",level:3},{value:"Migration &amp; Integration",id:"migration--integration",level:2},{value:"From REST APIs",id:"from-rest-apis",level:3},{value:"With Microservices",id:"with-microservices",level:3},{value:"Database Integration",id:"database-integration",level:3},{value:"Best Practices &amp; References",id:"best-practices--references",level:2},{value:"Example Repositories",id:"example-repositories",level:3},{value:"Project Structure",id:"project-structure",level:3},{value:"Development Workflow",id:"development-workflow",level:3},{value:"Performance Tips",id:"performance-tips",level:3},{value:"Tooling",id:"tooling",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"grpc",children:"gRPC"})}),"\n",(0,t.jsx)(n.h2,{id:"what-is-grpc",children:"What is gRPC?"}),"\n",(0,t.jsx)(n.p,{children:"High-performance RPC framework that uses Protocol Buffers for serialization. Enables efficient communication between services with automatic code generation for multiple languages."}),"\n",(0,t.jsx)(n.h2,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83c\udf10 Cross-Language"}),": One API definition works across 20+ programming languages"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\u26a1 High Performance"}),": 7-10x faster than REST with binary serialization and HTTP/2"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udd04 Streaming Support"}),": Real-time bidirectional communication built into the protocol"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udccb Contract-First"}),": Proto files serve as executable documentation and prevent breaking changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udee1\ufe0f Production Ready"}),": Authentication, load balancing, health checks, and observability included"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"\ud83d\udd27 Rich Ecosystem"}),": Extensive tooling, service mesh integration, and cloud provider support"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"why-grpc",children:"Why gRPC?"}),"\n",(0,t.jsx)(n.h3,{id:"cross-language-communication",children:"Cross-Language Communication"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What"}),": Write your API once, use it from any language - Go, Python, Java, C#, JavaScript, and 20+ others\n",(0,t.jsx)(n.strong,{children:"Why"}),": Microservices in different languages can communicate seamlessly. No more REST adapter layers between services."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:'// Define once in .proto file\nservice UserService {\n  rpc GetUser(GetUserRequest) returns (GetUserResponse);\n}\n\n// Use from any language:\n// Go: client.GetUser(ctx, &pb.GetUserRequest{Id: "123"})\n// Python: client.GetUser(GetUserRequest(id="123"))\n// Node.js: client.getUser({id: "123"}, callback)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"high-performance-by-design",children:"High Performance by Design"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What"}),": Binary serialization, HTTP/2 multiplexing, and efficient streaming\n",(0,t.jsx)(n.strong,{children:"Why"}),": 7-10x faster than JSON REST APIs. Handle thousands of concurrent connections with lower latency."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// REST: Multiple round trips, JSON parsing overhead\nconst user = await fetch("/api/users/123").then((r) => r.json());\nconst posts = await fetch("/api/posts?userId=123").then((r) => r.json());\nconst comments = await fetch("/api/comments?userId=123").then((r) => r.json());\n\n// gRPC: Single connection, binary data, parallel requests\nconst [user, posts, comments] = await Promise.all([\n  client.getUser({ id: "123" }),\n  client.getUserPosts({ userId: "123" }),\n  client.getUserComments({ userId: "123" }),\n]);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"built-in-streaming",children:"Built-in Streaming"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What"}),": Four types of communication: unary, server streaming, client streaming, bidirectional streaming\n",(0,t.jsx)(n.strong,{children:"Why"}),": Real-time features without WebSockets. Live data feeds, file uploads, chat systems all use the same protocol."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"service ChatService {\n  rpc SendMessage(Message) returns (Empty);           // Unary\n  rpc GetMessages(Empty) returns (stream Message);    // Server streaming\n  rpc UploadFile(stream FileChunk) returns (FileInfo); // Client streaming\n  rpc Chat(stream Message) returns (stream Message);   // Bidirectional\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"contract-first-development",children:"Contract-First Development"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What"}),": API contract defined in .proto files, code generated automatically\n",(0,t.jsx)(n.strong,{children:"Why"}),": Frontend and backend teams can work in parallel. Contract prevents breaking changes and serves as living documentation."]}),"\n",(0,t.jsx)(n.h3,{id:"production-grade-features",children:"Production-Grade Features"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"What"}),": Built-in authentication, load balancing, retries, circuit breakers, and observability\n",(0,t.jsx)(n.strong,{children:"Why"}),": Features you'd build yourself with REST come out of the box. Battle-tested by Google, Netflix, and other major companies."]}),"\n",(0,t.jsx)(n.h2,{id:"core-principles",children:"Core Principles"}),"\n",(0,t.jsx)(n.h3,{id:"protocol-buffers-protobuf",children:"Protocol Buffers (Protobuf)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Schema definition"})," in ",(0,t.jsx)(n.code,{children:".proto"})," files"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Binary serialization"})," for efficiency"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Code generation"})," for multiple languages"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Forward/backward compatibility"})," with versioning"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"http2-foundation",children:"HTTP/2 Foundation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multiplexing"})," multiple requests over single connection"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Header compression"})," reduces overhead"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Flow control"})," prevents overwhelming clients"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Server push"})," for proactive data delivery"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"service-oriented-architecture",children:"Service-Oriented Architecture"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Services"})," define related RPC methods"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Messages"})," define request/response structures"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Strongly typed"})," contracts prevent runtime errors"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Language agnostic"})," implementation"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,t.jsx)(n.h3,{id:"proto-definition",children:"Proto Definition"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Single source of truth for your API contract\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": Documentation, validation, and code generation from one file"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage user.v1;\n\n// Service definition - what operations are available\nservice UserService {\n  rpc GetUser(GetUserRequest) returns (GetUserResponse);\n  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);\n  rpc GetUserStream(GetUserStreamRequest) returns (stream User);\n}\n\n// Message definitions - data structures\nmessage GetUserRequest {\n  string user_id = 1;\n}\n\nmessage GetUserResponse {\n  User user = 1;\n  string error_message = 2;\n}\n\nmessage User {\n  string id = 1;\n  string name = 2;\n  string email = 3;\n  int64 created_at = 4;\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Proto file defines the contract. Generate client/server code for any supported language."})}),"\n",(0,t.jsx)(n.h3,{id:"code-generation",children:"Code Generation"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Transform proto files into language-specific client and server stubs\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": Type-safe clients and server interfaces with zero manual typing"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Generate JavaScript client and TypeScript definitions\nprotoc --js_out=import_style=commonjs:./src/generated \\\n       --grpc-web_out=import_style=typescript,mode=grpcwebtext:./src/generated \\\n       user.proto\n\n# Generate Go server stubs\nprotoc --go_out=. --go-grpc_out=. user.proto\n\n# Generate Python client\npython -m grpc_tools.protoc --python_out=. --pyi_out=. --grpc_python_out=. user.proto\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"One proto file generates clients for all your languages. No manual API client maintenance."})}),"\n",(0,t.jsx)(n.h3,{id:"service-implementation",children:"Service Implementation"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Implement the business logic for your gRPC methods\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": Focus on business logic, framework handles networking, serialization, and error handling"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Node.js server implementation\nclass UserService {\n  async getUser(call, callback) {\n    try {\n      const { user_id } = call.request;\n      const user = await database.findUser(user_id);\n\n      if (!user) {\n        return callback({\n          code: grpc.status.NOT_FOUND,\n          message: "User not found",\n        });\n      }\n\n      callback(null, {\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          created_at: user.createdAt.getTime(),\n        },\n      });\n    } catch (error) {\n      callback({\n        code: grpc.status.INTERNAL,\n        message: "Internal server error",\n      });\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Implement methods defined in proto. gRPC handles serialization, networking, and error propagation."})}),"\n",(0,t.jsx)(n.h2,{id:"server-setup",children:"Server Setup"}),"\n",(0,t.jsx)(n.h3,{id:"nodejs-server",children:"Node.js Server"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Serve gRPC methods over HTTP/2\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": High-performance server with built-in features like health checking and reflection"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const grpc = require("@grpc/grpc-js");\nconst protoLoader = require("@grpc/proto-loader");\n\n// Load proto definition\nconst packageDefinition = protoLoader.loadSync("user.proto", {\n  keepCase: true,\n  longs: String,\n  enums: String,\n  defaults: true,\n  oneofs: true,\n});\n\nconst userProto = grpc.loadPackageDefinition(packageDefinition).user.v1;\n\n// Create server\nconst server = new grpc.Server();\n\n// Add service implementation\nserver.addService(userProto.UserService.service, new UserService());\n\n// Start server\nserver.bindAsync(\n  "localhost:50051",\n  grpc.ServerCredentials.createInsecure(),\n  (err, port) => {\n    if (err) throw err;\n    console.log(`gRPC server running on port ${port}`);\n    server.start();\n  }\n);\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Minimal setup for a production-ready gRPC server. Built-in connection management and error handling."})}),"\n",(0,t.jsx)(n.h3,{id:"go-server",children:"Go Server"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": High-performance server implementation\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": Excellent concurrency and performance characteristics"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "log"\n    "net"\n\n    "google.golang.org/grpc"\n    pb "your-module/generated"\n)\n\ntype UserServer struct {\n    pb.UnimplementedUserServiceServer\n}\n\nfunc (s *UserServer) GetUser(ctx context.Context, req *pb.GetUserRequest) (*pb.GetUserResponse, error) {\n    // Business logic here\n    user := &pb.User{\n        Id:    req.UserId,\n        Name:  "John Doe",\n        Email: "john@example.com",\n    }\n\n    return &pb.GetUserResponse{User: user}, nil\n}\n\nfunc main() {\n    lis, err := net.Listen("tcp", ":50051")\n    if err != nil {\n        log.Fatalf("Failed to listen: %v", err)\n    }\n\n    s := grpc.NewServer()\n    pb.RegisterUserServiceServer(s, &UserServer{})\n\n    log.Println("gRPC server listening on :50051")\n    if err := s.Serve(lis); err != nil {\n        log.Fatalf("Failed to serve: %v", err)\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Go's excellent gRPC support makes it popular for high-performance microservices."})}),"\n",(0,t.jsx)(n.h2,{id:"client-setup",children:"Client Setup"}),"\n",(0,t.jsx)(n.h3,{id:"nodejs-client",children:"Node.js Client"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Call gRPC services from JavaScript/TypeScript applications\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": Type-safe client with automatic connection management and retries"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const grpc = require("@grpc/grpc-js");\nconst protoLoader = require("@grpc/proto-loader");\n\n// Load proto definition\nconst packageDefinition = protoLoader.loadSync("user.proto", {\n  keepCase: true,\n  longs: String,\n  enums: String,\n  defaults: true,\n  oneofs: true,\n});\n\nconst userProto = grpc.loadPackageDefinition(packageDefinition).user.v1;\n\n// Create client\nconst client = new userProto.UserService(\n  "localhost:50051",\n  grpc.credentials.createInsecure()\n);\n\n// Call methods\nclient.getUser({ user_id: "123" }, (error, response) => {\n  if (error) {\n    console.error("Error:", error.message);\n    return;\n  }\n  console.log("User:", response.user);\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Generated client handles connection pooling, retries, and load balancing automatically."})}),"\n",(0,t.jsx)(n.h3,{id:"browser-client-grpc-web",children:"Browser Client (gRPC-Web)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Use gRPC from web browsers\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": Same API contract for web and mobile clients, better than REST for real-time features"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const { UserServiceClient } = require("./generated/user_grpc_web_pb");\nconst { GetUserRequest } = require("./generated/user_pb");\n\n// Create client\nconst client = new UserServiceClient("http://localhost:8080");\n\n// Call methods\nconst request = new GetUserRequest();\nrequest.setUserId("123");\n\nclient.getUser(request, {}, (err, response) => {\n  if (err) {\n    console.error("Error:", err.message);\n    return;\n  }\n\n  const user = response.getUser();\n  console.log("User:", {\n    id: user.getId(),\n    name: user.getName(),\n    email: user.getEmail(),\n  });\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"gRPC-Web enables browser clients. Requires proxy (Envoy) to translate between HTTP/2 gRPC and HTTP/1.1."})}),"\n",(0,t.jsx)(n.h3,{id:"react-integration",children:"React Integration"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Use gRPC in React applications with proper state management\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": Real-time data with better performance than WebSockets or Server-Sent Events"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { useEffect, useState } from "react";\n\nfunction UserProfile({ userId }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const request = new GetUserRequest();\n    request.setUserId(userId);\n\n    client.getUser(request, {}, (err, response) => {\n      setLoading(false);\n      if (err) {\n        setError(err.message);\n        return;\n      }\n      setUser(response.getUser());\n    });\n  }, [userId]);\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div>\n      <h1>{user.getName()}</h1>\n      <p>{user.getEmail()}</p>\n    </div>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Standard React patterns work with gRPC. Consider wrapping in custom hooks for reusability."})}),"\n",(0,t.jsx)(n.h2,{id:"communication-patterns",children:"Communication Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"unary-rpc",children:"Unary RPC"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Simple request-response, like REST API calls\n",(0,t.jsx)(n.strong,{children:"When"}),": Standard CRUD operations, authentication, simple queries"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"service UserService {\n  rpc GetUser(GetUserRequest) returns (GetUserResponse);\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Client call\nclient.getUser({ user_id: "123" }, (error, response) => {\n  if (error) {\n    console.error("Failed to get user:", error.message);\n    return;\n  }\n  console.log("User:", response.user);\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Most common pattern. Works exactly like a function call with network in between."})}),"\n",(0,t.jsx)(n.h3,{id:"server-streaming",children:"Server Streaming"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Server sends multiple responses for one client request\n",(0,t.jsx)(n.strong,{children:"When"}),": Live feeds, real-time updates, large datasets, progressive loading"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"service NewsService {\n  rpc GetLiveNews(NewsRequest) returns (stream NewsItem);\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Client receives stream of news items\nconst call = client.getLiveNews({ category: "tech" });\n\ncall.on("data", (newsItem) => {\n  console.log("New article:", newsItem.title);\n  // Update UI in real-time\n});\n\ncall.on("end", () => {\n  console.log("Stream ended");\n});\n\ncall.on("error", (error) => {\n  console.error("Stream error:", error.message);\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Server pushes data as it becomes available. Client processes updates in real-time."})}),"\n",(0,t.jsx)(n.h3,{id:"client-streaming",children:"Client Streaming"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Client sends multiple requests, server responds once\n",(0,t.jsx)(n.strong,{children:"When"}),": File uploads, batch operations, aggregating data over time"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"service FileService {\n  rpc UploadFile(stream FileChunk) returns (UploadResponse);\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Client uploads file in chunks\nconst call = client.uploadFile((error, response) => {\n  if (error) {\n    console.error("Upload failed:", error.message);\n    return;\n  }\n  console.log("Upload complete:", response.file_url);\n});\n\n// Send file in chunks\nfs.createReadStream("large-file.pdf")\n  .on("data", (chunk) => {\n    call.write({\n      data: chunk,\n      filename: "large-file.pdf",\n    });\n  })\n  .on("end", () => {\n    call.end();\n  });\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Efficient for large files or when you need to aggregate multiple inputs server-side."})}),"\n",(0,t.jsx)(n.h3,{id:"bidirectional-streaming",children:"Bidirectional Streaming"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Both client and server send streams of messages\n",(0,t.jsx)(n.strong,{children:"When"}),": Chat applications, collaborative editing, real-time gaming, live monitoring"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"service ChatService {\n  rpc Chat(stream ChatMessage) returns (stream ChatMessage);\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Real-time chat\nconst call = client.chat();\n\n// Listen for messages from other users\ncall.on("data", (message) => {\n  console.log(`${message.user}: ${message.text}`);\n  // Update chat UI\n});\n\n// Send messages\ndocument.getElementById("send-button").onclick = () => {\n  const text = document.getElementById("message-input").value;\n  call.write({\n    user: currentUser,\n    text: text,\n    timestamp: Date.now(),\n  });\n};\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Full duplex communication. Both sides can send/receive independently."})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.h3,{id:"status-codes",children:"Status Codes"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Standardized error codes across all gRPC implementations\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": Consistent error handling regardless of server language"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const grpc = require("@grpc/grpc-js");\n\n// Server-side error handling\nclass UserService {\n  async getUser(call, callback) {\n    const { user_id } = call.request;\n\n    if (!user_id) {\n      return callback({\n        code: grpc.status.INVALID_ARGUMENT,\n        message: "User ID is required",\n      });\n    }\n\n    const user = await database.findUser(user_id);\n    if (!user) {\n      return callback({\n        code: grpc.status.NOT_FOUND,\n        message: "User not found",\n      });\n    }\n\n    // Check permissions\n    if (!canAccessUser(call.metadata, user)) {\n      return callback({\n        code: grpc.status.PERMISSION_DENIED,\n        message: "Access denied",\n      });\n    }\n\n    callback(null, { user });\n  }\n}\n\n// Client-side error handling\nclient.getUser({ user_id: "123" }, (error, response) => {\n  if (error) {\n    switch (error.code) {\n      case grpc.status.NOT_FOUND:\n        showUserNotFoundError();\n        break;\n      case grpc.status.PERMISSION_DENIED:\n        redirectToLogin();\n        break;\n      case grpc.status.INVALID_ARGUMENT:\n        showValidationError(error.message);\n        break;\n      default:\n        showGenericError();\n    }\n    return;\n  }\n\n  displayUser(response.user);\n});\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Standard status codes enable consistent error handling across different services and languages."})}),"\n",(0,t.jsx)(n.h3,{id:"error-details",children:"Error Details"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Include structured error information beyond just status codes\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": Rich error context for better debugging and user experience"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"// Error details in proto\nmessage ErrorDetail {\n  string field = 1;\n  string message = 2;\n}\n\nmessage ValidationError {\n  repeated ErrorDetail errors = 1;\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Server sends detailed errors\nconst { ValidationError, ErrorDetail } = require("./generated/error_pb");\n\nclass UserService {\n  async createUser(call, callback) {\n    const errors = validateUser(call.request);\n\n    if (errors.length > 0) {\n      const validationError = new ValidationError();\n      errors.forEach((err) => {\n        const detail = new ErrorDetail();\n        detail.setField(err.field);\n        detail.setMessage(err.message);\n        validationError.addErrors(detail);\n      });\n\n      const error = new Error("Validation failed");\n      error.code = grpc.status.INVALID_ARGUMENT;\n      error.details = [validationError];\n\n      return callback(error);\n    }\n\n    // Proceed with creation\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Rich error details help clients provide specific feedback to users."})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,t.jsx)(n.h3,{id:"authentication--security",children:"Authentication & Security"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Secure your gRPC services with authentication and authorization\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": Production-ready security with minimal configuration"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Server with TLS and authentication\nconst fs = require("fs");\n\nconst server = new grpc.Server();\n\n// Add authentication middleware\nconst authInterceptor = (ctx, next) => {\n  const token = ctx.call.metadata.get("authorization")[0];\n\n  if (!isValidToken(token)) {\n    const error = new Error("Unauthorized");\n    error.code = grpc.status.UNAUTHENTICATED;\n    throw error;\n  }\n\n  ctx.user = getUserFromToken(token);\n  return next();\n};\n\nserver.addService(userProto.UserService.service, new UserService(), {\n  interceptors: [authInterceptor],\n});\n\n// Use TLS credentials\nconst credentials = grpc.ServerCredentials.createSsl(\n  fs.readFileSync("ca-cert.pem"),\n  [\n    {\n      cert_chain: fs.readFileSync("server-cert.pem"),\n      private_key: fs.readFileSync("server-key.pem"),\n    },\n  ]\n);\n\nserver.bindAsync("localhost:50051", credentials, callback);\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Built-in support for TLS, authentication tokens, and custom authorization logic."})}),"\n",(0,t.jsx)(n.h3,{id:"load-balancing",children:"Load Balancing"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Distribute requests across multiple server instances\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": High availability and horizontal scaling"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Client with load balancing\nconst client = new userProto.UserService(\n  "dns:///user-service:50051", // Service discovery via DNS\n  grpc.credentials.createInsecure(),\n  {\n    "grpc.lb_policy_name": "round_robin",\n    "grpc.service_config": JSON.stringify({\n      loadBalancingConfig: [{ round_robin: {} }],\n      methodConfig: [\n        {\n          name: [{ service: "user.v1.UserService" }],\n          retryPolicy: {\n            maxAttempts: 3,\n            initialBackoff: "0.1s",\n            maxBackoff: "1s",\n            backoffMultiplier: 2,\n            retryableStatusCodes: ["UNAVAILABLE", "DEADLINE_EXCEEDED"],\n          },\n        },\n      ],\n    }),\n  }\n);\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Client automatically distributes load and retries failed requests."})}),"\n",(0,t.jsx)(n.h3,{id:"interceptorsmiddleware",children:"Interceptors/Middleware"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Cross-cutting concerns like logging, metrics, authentication\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": Reusable logic that applies to all or specific methods"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Logging interceptor\nconst loggingInterceptor = (ctx, next) => {\n  const start = Date.now();\n  const method = ctx.call.getPath();\n\n  console.log(`[${new Date().toISOString()}] ${method} started`);\n\n  return next()\n    .then((result) => {\n      const duration = Date.now() - start;\n      console.log(\n        `[${new Date().toISOString()}] ${method} completed in ${duration}ms`\n      );\n      return result;\n    })\n    .catch((error) => {\n      const duration = Date.now() - start;\n      console.log(\n        `[${new Date().toISOString()}] ${method} failed in ${duration}ms: ${\n          error.message\n        }`\n      );\n      throw error;\n    });\n};\n\n// Apply to all methods\nserver.addService(userProto.UserService.service, new UserService(), {\n  interceptors: [loggingInterceptor, authInterceptor, metricsInterceptor],\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Interceptors compose cleanly for complex cross-cutting requirements."})}),"\n",(0,t.jsx)(n.h3,{id:"health-checking",children:"Health Checking"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Monitor service health for load balancers and orchestrators\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": Automatic failover and traffic routing based on service health"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const health = require("grpc-health-check");\n\n// Add health checking service\nconst healthImpl = new health.Implementation({\n  "user.v1.UserService": health.servingStatus.SERVING,\n  "": health.servingStatus.SERVING, // Overall service health\n});\n\nserver.addService(health.service, healthImpl);\n\n// Update health status based on dependencies\nsetInterval(() => {\n  const isDbHealthy = checkDatabaseConnection();\n  const status = isDbHealthy\n    ? health.servingStatus.SERVING\n    : health.servingStatus.NOT_SERVING;\n\n  healthImpl.setStatus("user.v1.UserService", status);\n}, 10000);\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Standard health checking protocol understood by Kubernetes, load balancers, etc."})}),"\n",(0,t.jsx)(n.h2,{id:"migration--integration",children:"Migration & Integration"}),"\n",(0,t.jsx)(n.h3,{id:"from-rest-apis",children:"From REST APIs"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Strategy"}),": Gradual migration with dual-stack support\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": Migrate critical paths first, maintain compatibility"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Serve both REST and gRPC\nconst express = require("express");\nconst app = express();\n\n// Existing REST endpoints\napp.get("/api/users/:id", async (req, res) => {\n  // Legacy REST handler\n});\n\n// gRPC server on different port\nconst grpcServer = new grpc.Server();\ngrpcServer.addService(userProto.UserService.service, new UserService());\ngrpcServer.bindAsync(\n  "localhost:50051",\n  grpc.ServerCredentials.createInsecure(),\n  callback\n);\n\n// Or use grpc-gateway to serve gRPC via REST\n'})}),"\n",(0,t.jsx)(n.h3,{id:"with-microservices",children:"With Microservices"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Strategy"}),": Service mesh integration with Envoy, Istio, or Linkerd\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": Observability, security, and traffic management"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# Kubernetes deployment with Istio\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-service\nspec:\n  template:\n    metadata:\n      annotations:\n        sidecar.istio.io/inject: "true" # Automatic proxy injection\n    spec:\n      containers:\n        - name: user-service\n          image: user-service:latest\n          ports:\n            - containerPort: 50051\n'})}),"\n",(0,t.jsx)(n.h3,{id:"database-integration",children:"Database Integration"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Strategy"}),": Use connection pooling and prepared statements\n",(0,t.jsx)(n.strong,{children:"Benefit"}),": Efficient database usage with high-concurrency gRPC services"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const { Pool } = require("pg");\n\nclass UserService {\n  constructor() {\n    this.db = new Pool({\n      connectionString: process.env.DATABASE_URL,\n      max: 20, // Connection pool size\n    });\n  }\n\n  async getUser(call, callback) {\n    try {\n      const { rows } = await this.db.query(\n        "SELECT id, name, email FROM users WHERE id = $1",\n        [call.request.user_id]\n      );\n\n      if (rows.length === 0) {\n        return callback({\n          code: grpc.status.NOT_FOUND,\n          message: "User not found",\n        });\n      }\n\n      callback(null, { user: rows[0] });\n    } catch (error) {\n      callback({\n        code: grpc.status.INTERNAL,\n        message: "Database error",\n      });\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices--references",children:"Best Practices & References"}),"\n",(0,t.jsx)(n.h3,{id:"example-repositories",children:"Example Repositories"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Production Examples:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/grpc/grpc-go/tree/master/examples",children:(0,t.jsx)(n.strong,{children:"grpc-go examples"})})," - Official Go examples"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/grpc-ecosystem/awesome-grpc",children:(0,t.jsx)(n.strong,{children:"awesome-grpc"})})," - Curated list of gRPC resources"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/grpc/grpc-web/tree/master/examples",children:(0,t.jsx)(n.strong,{children:"grpc-web examples"})})," - Browser client examples"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/bufbuild/buf-examples",children:(0,t.jsx)(n.strong,{children:"buf examples"})})," - Modern protobuf workflow examples"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Learning Examples:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/harlow/go-micro-services",children:(0,t.jsx)(n.strong,{children:"grpc microservices"})})," - Microservices architecture"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/grpc/grpc-node/tree/master/examples",children:(0,t.jsx)(n.strong,{children:"grpc-node examples"})})," - Node.js implementations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/grpc/grpc-go/tree/master/examples/features/streaming",children:(0,t.jsx)(n.strong,{children:"grpc streaming"})})," - All streaming patterns"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"project-structure",children:"Project Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"proto/\n\u251c\u2500\u2500 user/\n\u2502   \u2514\u2500\u2500 v1/\n\u2502       \u2514\u2500\u2500 user.proto       # User service definition\n\u251c\u2500\u2500 auth/\n\u2502   \u2514\u2500\u2500 v1/\n\u2502       \u2514\u2500\u2500 auth.proto       # Auth service definition\n\u2514\u2500\u2500 common/\n    \u2514\u2500\u2500 v1/\n        \u2514\u2500\u2500 common.proto     # Shared messages\n\nsrc/\n\u251c\u2500\u2500 generated/               # Generated code (gitignored)\n\u251c\u2500\u2500 services/               # Service implementations\n\u2502   \u251c\u2500\u2500 user.js\n\u2502   \u2514\u2500\u2500 auth.js\n\u251c\u2500\u2500 interceptors/           # Middleware\n\u2502   \u251c\u2500\u2500 auth.js\n\u2502   \u251c\u2500\u2500 logging.js\n\u2502   \u2514\u2500\u2500 metrics.js\n\u2514\u2500\u2500 server.js              # Server setup\n\nbuf.yaml                   # Buf configuration\nbuf.gen.yaml              # Code generation config\n"})}),"\n",(0,t.jsx)(n.h3,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Define proto contracts"})," with stakeholders"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Generate code"})," for all languages using buf or protoc"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Implement services"})," focusing on business logic"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Add interceptors"})," for cross-cutting concerns"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test with tools"})," like grpcurl or Postman"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deploy with service mesh"})," for production features"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use connection pooling"})," - reuse connections across requests"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Enable compression"})," - gzip compression for large payloads"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Batch operations"})," - group related calls when possible"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Stream large data"})," - use streaming for files or datasets"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitor metrics"})," - track latency, error rates, and throughput"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"tooling",children:"Tooling"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://buf.build/",children:(0,t.jsx)(n.strong,{children:"buf"})})," - Modern protobuf workflow and linting"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/fullstorydev/grpcurl",children:(0,t.jsx)(n.strong,{children:"grpcurl"})})," - cURL for gRPC services"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://www.postman.com/",children:(0,t.jsx)(n.strong,{children:"Postman"})})," - GUI client for testing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/ktr0731/evans",children:(0,t.jsx)(n.strong,{children:"Evans"})})," - Interactive gRPC client"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://github.com/SafetyCulture/grpc-web-devtools",children:(0,t.jsx)(n.strong,{children:"grpc-web-devtools"})})," - Browser debugging"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var s=r(6540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);