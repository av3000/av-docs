"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[371],{2643:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"frontend/angular/design-patterns/structural-patterns/flyweight","title":"Flyweight","description":"Use case: Reducing memory usage by sharing common parts of objects.","source":"@site/docs/frontend/angular/design-patterns/structural-patterns/flyweight.md","sourceDirName":"frontend/angular/design-patterns/structural-patterns","slug":"/frontend/angular/design-patterns/structural-patterns/flyweight","permalink":"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/flyweight","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/angular/design-patterns/structural-patterns/flyweight.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"Facade","permalink":"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/facade"},"next":{"title":"Proxy","permalink":"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/proxy"}}');var r=n(4848),a=n(8453);const i={},o="Flyweight",c={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"flyweight",children:"Flyweight"})}),"\n",(0,r.jsx)(t.p,{children:"Use case: Reducing memory usage by sharing common parts of objects."}),"\n",(0,r.jsx)(t.p,{children:"Example: Caching Angular pipes or reusing component templates."}),"\n",(0,r.jsx)(t.p,{children:"How to find: Look for instances where objects are reused rather than recreated."}),"\n",(0,r.jsx)(t.p,{children:"Explanation:"}),"\n",(0,r.jsx)(t.p,{children:"The Flyweight pattern minimizes memory usage by sharing as much data as possible with similar objects. In Angular, this can be seen in scenarios where you have a large number of similar components or data structures that can share common data."}),"\n",(0,r.jsx)(t.p,{children:"Example Code:"}),"\n",(0,r.jsx)(t.p,{children:"Suppose you have a large list of items with similar properties."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"// flyweight.service.ts\n@Injectable({\n  providedIn: 'root',\n})\nexport class FlyweightService {\n  private flyweights: { [key: string]: any } = {};\n\n  getFlyweight(key: string) {\n    if (!this.flyweights[key]) {\n      // Create a new flyweight if it doesn't exist\n      this.flyweights[key] = { sharedState: key };\n    }\n    return this.flyweights[key];\n  }\n}\n\n// item-list.component.ts\n@Component({\n  selector: 'app-item-list',\n  template: `<div *ngFor=\"let item of items\">\n               {{ item.sharedState }} - {{ item.uniqueState }}\n             </div>`,\n})\nexport class ItemListComponent implements OnInit {\n  items: any[] = [];\n\n  constructor(private flyweightService: FlyweightService) {}\n\n  ngOnInit() {\n    const sharedStates = ['TypeA', 'TypeB', 'TypeC'];\n\n    for (let i = 0; i < 1000; i++) {\n      const sharedState = sharedStates[i % 3];\n      const uniqueState = `Item ${i}`;\n      const flyweight = this.flyweightService.getFlyweight(sharedState);\n\n      this.items.push({\n        ...flyweight,\n        uniqueState,\n      });\n    }\n  }\n}\n"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"The FlyweightService manages shared states (sharedState)."}),"\n",(0,r.jsx)(t.li,{children:"Instead of creating 1000 separate objects with the same sharedState, we reuse them."}),"\n",(0,r.jsx)(t.li,{children:"This reduces memory usage by sharing common data among multiple objects."}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(6540);const r={},a=s.createContext(r);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);