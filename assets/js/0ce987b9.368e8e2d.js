"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[4734],{1310:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"frontend/angular/design-patterns/structural-patterns/decorator","title":"Decorator","description":"Use case: Adding behavior to components or services without modifying their code.","source":"@site/docs/frontend/angular/design-patterns/structural-patterns/decorator.md","sourceDirName":"frontend/angular/design-patterns/structural-patterns","slug":"/frontend/angular/design-patterns/structural-patterns/decorator","permalink":"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/decorator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/angular/design-patterns/structural-patterns/decorator.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"Composite","permalink":"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/composite"},"next":{"title":"Facade","permalink":"/av-docs/docs/frontend/angular/design-patterns/structural-patterns/facade"}}');var o=t(4848),a=t(8453);const s={},c="Decorator",d={},i=[];function l(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"decorator",children:"Decorator"})}),"\n",(0,o.jsx)(n.p,{children:"Use case: Adding behavior to components or services without modifying their code."}),"\n",(0,o.jsx)(n.p,{children:"Example: Using Angular decorators like @Component, @Injectable, or custom property decorators."}),"\n",(0,o.jsx)(n.p,{children:"How to find: Look for @ symbols followed by decorator names in class definitions."}),"\n",(0,o.jsx)(n.p,{children:"Explanation:"}),"\n",(0,o.jsx)(n.p,{children:"In Angular, decorators are a form of the Decorator pattern. They allow you to annotate and modify classes and class members. Angular uses decorators extensively to define components, services, and other functionalities."}),"\n",(0,o.jsx)(n.p,{children:"Example Code:"}),"\n",(0,o.jsx)(n.p,{children:"Custom Property Decorator:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'// readonly.decorator.ts\nexport function ReadOnly(target: any, propertyKey: string) {\n  Object.defineProperty(target, propertyKey, {\n    writable: false,\n  });\n}\n\n// demo.component.ts\nimport { Component } from "@angular/core";\nimport { ReadOnly } from "./readonly.decorator";\n\n@Component({\n  selector: "app-demo",\n  template: `<p>{{ message }}</p>`,\n})\nexport class DemoComponent {\n  @ReadOnly\n  message = "This is a read-only message";\n\n  constructor() {\n    // Trying to modify the message will have no effect\n    this.message = "Attempting to change the message";\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"The @ReadOnly decorator adds behavior to the message property without modifying the original code."}),"\n",(0,o.jsx)(n.li,{children:"Angular's built-in decorators like @Component and @Injectable also add metadata and behavior to classes."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(6540);const o={},a=r.createContext(o);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);