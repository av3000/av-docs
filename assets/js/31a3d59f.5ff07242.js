"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[603],{5360:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"frontend/patterns/microfrontends","title":"Micro-frontends","description":"Microfrontends fundamentals","source":"@site/docs/frontend/patterns/microfrontends.md","sourceDirName":"frontend/patterns","slug":"/frontend/patterns/microfrontends","permalink":"/av-docs/docs/frontend/patterns/microfrontends","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/patterns/microfrontends.md","tags":[],"version":"current","frontMatter":{}}');var o=t(4848),s=t(8453);const a={},i="Micro-frontends",c={},d=[{value:"Vertical vs Horizontal Microfrontends",id:"vertical-vs-horizontal-microfrontends",level:2}];function l(e){const n={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"micro-frontends",children:"Micro-frontends"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://www.youtube.com/watch?v=SqNjO5hMdrU&ab_channel=My50cents",children:"Microfrontends fundamentals"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://www.manning.com/liveproject/building-micro-frontends-with-a-team-based-vertical-architecture",children:"https://www.manning.com/liveproject/building-micro-frontends-with-a-team-based-vertical-architecture"})}),"\n",(0,o.jsx)(n.p,{children:"Independence of development and releases, suitable for Domain-driven development(DDD). Primarily is organisational solution. You need to have justification for the microfrontends to reason all the complexity which comes with it, think of team size and potential product evolution growth."}),"\n",(0,o.jsx)(n.p,{children:"Microfrontends helps to focus on Domain and sub-domain of applications from technical and organisational perspective. As a sub-domain, team has autonomy to choose the technologies for development, testing, deploying. Usage of different tech to build one system/platform, enables a lot of discussion between teams for the better system outcome."}),"\n",(0,o.jsx)(n.h2,{id:"vertical-vs-horizontal-microfrontends",children:"Vertical vs Horizontal Microfrontends"}),"\n",(0,o.jsx)(n.p,{children:"The terms vertical microfrontends and horizontal microfrontends describe different approaches to dividing a monolithic frontend into smaller, independently manageable parts. The choice between them depends on the application\u2019s architecture and the team's organizational structure."}),"\n",(0,o.jsx)(n.p,{children:"Vertical Microfrontends"}),"\n",(0,o.jsx)(n.p,{children:"A vertical microfrontend handles a complete end-to-end slice of functionality, encompassing both frontend and backend responsibilities. Each microfrontend is self-contained, managing:"}),"\n",(0,o.jsx)(n.p,{children:"UI (Frontend)\nBusiness logic\nData layer (Backend services or APIs)"}),"\n",(0,o.jsx)(n.p,{children:"Characteristics"}),"\n",(0,o.jsx)(n.p,{children:"Complete Feature Ownership: A vertical microfrontend might manage all aspects of a single feature like user authentication, payments, or dashboards.\nTechnology Independence: Teams can choose different tech stacks for different verticals (e.g., React for one and Angular for another).\nIndependent Deployment: Each vertical microfrontend can be developed, deployed, and scaled independently."}),"\n",(0,o.jsx)(n.p,{children:"Advantages"}),"\n",(0,o.jsx)(n.p,{children:"Clear team boundaries, aligning with cross-functional teams (e.g., a team owns the \u201cUsers\u201d feature across frontend and backend).\nReduced cross-team dependencies, improving agility.\nEasier to scale specific features since each module is self-contained."}),"\n",(0,o.jsx)(n.p,{children:"Example"}),"\n",(0,o.jsx)(n.p,{children:"In a carplates app:"}),"\n",(0,o.jsx)(n.p,{children:"A User Management microfrontend (React):\nHandles registration, login, and profiles.\nCommunicates with a dedicated user service in the backend.\nA Carplates microfrontend (Angular):\nManages CRUD operations for carplates.\nTalks to a carplates API."}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:"Horizontal Microfrontends"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"A horizontal microfrontend splits the application by frontend layer, focusing only on the UI. The backend or data layer remains centralized or shared across microfrontends. Horizontal microfrontends are often divided based on:"}),"\n",(0,o.jsx)(n.p,{children:"UI layers (e.g., header, sidebar, or main content).\nPages or navigation flows."}),"\n",(0,o.jsx)(n.p,{children:"Characteristics"}),"\n",(0,o.jsx)(n.p,{children:"Shared Backend: All microfrontends use the same backend services.\nFrontend-Focused: Teams specialize in building and maintaining UI components or pages.\nShared Dependencies: Often relies on shared libraries or design systems for consistent styling and components."}),"\n",(0,o.jsx)(n.p,{children:"Advantages"}),"\n",(0,o.jsx)(n.p,{children:"Encourages reusability of components across multiple microfrontends.\nEasier implementation for UI-focused projects.\nSimplifies backend architecture by avoiding duplication of APIs."}),"\n",(0,o.jsx)(n.p,{children:"Example"}),"\n",(0,o.jsx)(n.p,{children:"In a carplates app:"}),"\n",(0,o.jsx)(n.p,{children:"A Header Microfrontend (React):\nHandles navigation and authentication status.\nA Main Content Microfrontend (Angular):\nDisplays the carplates table and CRUD forms.\nA Sidebar Microfrontend (Vue.js):\nProvides quick links to cars or user settings."}),"\n",(0,o.jsxs)(n.ol,{start:"3",children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Key Differences\nAspect Vertical Microfrontends Horizontal Microfrontends\nScope End-to-end, feature-based (frontend + backend). UI-focused, layer-based.\nBackend Independent for each vertical microfrontend. Shared backend across all microfrontends.\nTeam Structure Cross-functional teams managing full features. Specialized frontend teams focused on UI layers.\nTech Stack Can vary between verticals. Typically consistent within the same layer.\nUse Case Best for feature isolation, independent scaling, or tech migration. Best for shared UI projects or consistent UX requirements.\nDeployment Independent deployments for each feature. Deployment usually tied to frontend/UI updates."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"When to Choose What?"}),"\n",(0,o.jsx)(n.p,{children:'Choose Vertical Microfrontends:\nWhen features need to be fully independent (e.g., different products like "Users" vs. "Cars").\nIf teams need freedom to choose different technologies.\nWhen the application must scale specific features independently.'}),"\n",(0,o.jsx)(n.p,{children:"Choose Horizontal Microfrontends:\nWhen focusing on frontend layer separation (e.g., distinct teams for header, sidebar, and main content).\nTo ensure consistency in UI/UX design across the app.\nIf the backend is centralized and shared across all microfrontends."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Combining Both Approaches"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"In large systems, you can combine vertical and horizontal strategies:"}),"\n",(0,o.jsx)(n.p,{children:'Use vertical microfrontends for feature-based divisions (e.g., \u201cUsers\u201d and \u201cCars\u201d modules).\nApply horizontal microfrontends within a feature to divide UI components (e.g., header, sidebar, and main content for "Cars").'})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(6540);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);