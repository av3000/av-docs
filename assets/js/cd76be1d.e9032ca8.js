"use strict";(self.webpackChunkav_docusaurus_classic=self.webpackChunkav_docusaurus_classic||[]).push([[6925],{5204:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"frontend/styling/architecture/oocss","title":"OOCSS (Object-Oriented CSS)","description":"Object-Oriented CSS (OOCSS) is a CSS methodology focused on creating reusable, scalable, and more maintainable stylesheets by applying object-oriented programming principles to CSS development. Developed by Nicole Sullivan around 2008, OOCSS aims to reduce redundancy and increase modularity in CSS.","source":"@site/docs/frontend/styling/architecture/oocss.md","sourceDirName":"frontend/styling/architecture","slug":"/frontend/styling/architecture/oocss","permalink":"/av-docs/docs/frontend/styling/architecture/oocss","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/styling/architecture/oocss.md","tags":[],"version":"current","frontMatter":{},"sidebar":"frontendSidebar","previous":{"title":"ITCSS","permalink":"/av-docs/docs/frontend/styling/architecture/itcss"},"next":{"title":"SMACSS (Scalable and Modular Architecture for CSS)","permalink":"/av-docs/docs/frontend/styling/architecture/smacss"}}');var t=s(4848),r=s(8453);const o={},d="OOCSS (Object-Oriented CSS)",a={},l=[{value:"Core Principles",id:"core-principles",level:2},{value:"1. Separation of Structure and Skin",id:"1-separation-of-structure-and-skin",level:3},{value:"2. Separation of Containers and Content",id:"2-separation-of-containers-and-content",level:3},{value:"Benefits of OOCSS",id:"benefits-of-oocss",level:2},{value:"Common OOCSS Patterns",id:"common-oocss-patterns",level:2},{value:"Media Object",id:"media-object",level:3},{value:"Flag Object",id:"flag-object",level:3},{value:"Implementation Strategies",id:"implementation-strategies",level:2},{value:"OOCSS vs. Other Methodologies",id:"oocss-vs-other-methodologies",level:2},{value:"Limitations and Considerations",id:"limitations-and-considerations",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Resources",id:"resources",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"oocss-object-oriented-css",children:"OOCSS (Object-Oriented CSS)"})}),"\n",(0,t.jsx)(n.p,{children:"Object-Oriented CSS (OOCSS) is a CSS methodology focused on creating reusable, scalable, and more maintainable stylesheets by applying object-oriented programming principles to CSS development. Developed by Nicole Sullivan around 2008, OOCSS aims to reduce redundancy and increase modularity in CSS."}),"\n",(0,t.jsx)(n.h2,{id:"core-principles",children:"Core Principles"}),"\n",(0,t.jsx)(n.h3,{id:"1-separation-of-structure-and-skin",children:"1. Separation of Structure and Skin"}),"\n",(0,t.jsx)(n.p,{children:"Separate the structure (width, height, margins, padding, overflow) from the skin (visual features like colors, fonts, shadows, gradients):"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Before OOCSS:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:".button-green {\n  width: 100px;\n  height: 40px;\n  padding: 10px;\n  border: 1px solid #9eb25d;\n  background-color: #9eb25d;\n  color: #fff;\n  border-radius: 5px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n}\n\n.box-red {\n  width: 200px;\n  padding: 10px;\n  border: 1px solid #dd3030;\n  background-color: #dd3030;\n  color: #fff;\n  border-radius: 5px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"After OOCSS:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"/* Structure */\n.button {\n  width: 100px;\n  height: 40px;\n  padding: 10px;\n}\n\n.box {\n  width: 200px;\n  padding: 10px;\n}\n\n/* Skin */\n.skin-green {\n  border: 1px solid #9eb25d;\n  background-color: #9eb25d;\n  color: #fff;\n}\n\n.skin-red {\n  border: 1px solid #dd3030;\n  background-color: #dd3030;\n  color: #fff;\n}\n\n.rounded {\n  border-radius: 5px;\n}\n\n.shadowed {\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Usage in HTML:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<button class="button skin-green rounded shadowed">Green Button</button>\n<div class="box skin-red rounded shadowed">Red Box</div>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-separation-of-containers-and-content",children:"2. Separation of Containers and Content"}),"\n",(0,t.jsx)(n.p,{children:"Content elements should look the same regardless of their container:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Before OOCSS:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:".sidebar h2 {\n  font-size: 18px;\n  color: #333;\n  line-height: 1.5;\n}\n\n.footer h2 {\n  font-size: 18px;\n  color: #333;\n  line-height: 1.5;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"After OOCSS:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:".heading {\n  font-size: 18px;\n  color: #333;\n  line-height: 1.5;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Usage in HTML:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<div class="sidebar">\n  <h2 class="heading">Sidebar Title</h2>\n</div>\n<div class="footer">\n  <h2 class="heading">Footer Title</h2>\n</div>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"benefits-of-oocss",children:"Benefits of OOCSS"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reduced CSS size"}),": Eliminates redundant code by creating reusable patterns"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Improved performance"}),": Smaller CSS files, fewer style recalculations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Better maintainability"}),": Changes can be made in one place and applied across the site"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consistent UI"}),": Encourages consistency in design patterns"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Easier collaboration"}),": Team members can understand and work with standardized modules"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-oocss-patterns",children:"Common OOCSS Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"media-object",children:"Media Object"}),"\n",(0,t.jsx)(n.p,{children:"One of the most famous OOCSS patterns is the Media Object, which handles an image or media on one side and text on the other:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:".media {\n  display: flex;\n  align-items: flex-start;\n}\n\n.media__image {\n  margin-right: 10px;\n}\n\n.media__content {\n  flex: 1;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Usage:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<div class="media">\n  <img class="media__image" src="profile.jpg" alt="User profile" />\n  <div class="media__content">\n    <h3>User Name</h3>\n    <p>User description or message goes here...</p>\n  </div>\n</div>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"flag-object",children:"Flag Object"}),"\n",(0,t.jsx)(n.p,{children:"Similar to the Media Object but with vertical alignment options:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:".flag {\n  display: flex;\n  align-items: center; /* Middle alignment by default */\n}\n\n.flag--top {\n  align-items: flex-start;\n}\n\n.flag--bottom {\n  align-items: flex-end;\n}\n\n.flag__image {\n  margin-right: 10px;\n}\n\n.flag__content {\n  flex: 1;\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"implementation-strategies",children:"Implementation Strategies"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Start with base objects"}),": Identify common patterns in your design"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Extract repeated styles"}),": Look for visual patterns that can be reused"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Name descriptively"}),": Use names based on function, not appearance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Avoid contextual styles"}),": Minimize styles based on location"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create theme classes"}),": Group visual styles that are used together"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"oocss-vs-other-methodologies",children:"OOCSS vs. Other Methodologies"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Methodology"}),(0,t.jsx)(n.th,{children:"Focus"}),(0,t.jsx)(n.th,{children:"Naming Convention"}),(0,t.jsx)(n.th,{children:"Complexity"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"OOCSS"})}),(0,t.jsx)(n.td,{children:"Reusability, separation of concerns"}),(0,t.jsx)(n.td,{children:"Functional, descriptive"}),(0,t.jsx)(n.td,{children:"Medium"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"BEM"})}),(0,t.jsx)(n.td,{children:"Component-based, strict relationships"}),(0,t.jsx)(n.td,{children:"Block__Element--Modifier"}),(0,t.jsx)(n.td,{children:"Medium-High"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"SMACSS"})}),(0,t.jsx)(n.td,{children:"Categorization, organization"}),(0,t.jsx)(n.td,{children:"Categorized prefixes"}),(0,t.jsx)(n.td,{children:"Medium"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Atomic CSS"})}),(0,t.jsx)(n.td,{children:"Single-purpose classes"}),(0,t.jsx)(n.td,{children:"Functional abbreviations"}),(0,t.jsx)(n.td,{children:"Low"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"limitations-and-considerations",children:"Limitations and Considerations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multiple classes in HTML"}),": Can make the HTML more verbose"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Learning curve"}),": Team needs to understand and follow the pattern"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Balancing granularity"}),": Too many small classes can become hard to manage"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Finding the right abstractions"}),": Identifying reusable patterns requires experience"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Don't go overboard with abstraction"}),": Create objects that have clear utility"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Document your objects"}),": Create a style guide for team reference"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Be consistent"}),": Use the same patterns throughout your project"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Balance flexibility and specificity"}),": Too generic can lead to excessive overrides"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Combine with other methodologies"}),": OOCSS principles can complement BEM or SMACSS"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.slideshare.net/stubbornella/object-oriented-css",children:"Nicole Sullivan's Original OOCSS Presentation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/stubbornella/oocss/wiki",children:"OOCSS on GitHub"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/",children:"The Media Object Saves Hundreds of Lines of Code"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.smashingmagazine.com/2011/12/an-introduction-to-object-oriented-css-oocss/",children:"An Introduction To Object Oriented CSS (OOCSS) - Smashing Magazine"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://css-tricks.com/oocss-sass-feeling-superficial/",children:"OOCSS + Sass = \u2764\ufe0f - CSS-Tricks"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var i=s(6540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);